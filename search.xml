<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Add Disqus Comment Box on Hexo</title>
    <url>/2021/09/24/Add-Disqus-Comment-Box-on-Hexo/</url>
    <content><![CDATA[<h2 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h2><p>Disqus is a global comment system that improves discussion on websites and connects conversations across the web.</p>
<h2 id="Create-Site"><a href="#Create-Site" class="headerlink" title="Create Site"></a>Create Site</h2><p>Create an account and log into <a href="https://disqus.com/" title="" target="">Disqus</a>. Once logged in, click the <code>GET STARTED</code> button on the homepage.</p>
<img src="/2021/09/24/Add-Disqus-Comment-Box-on-Hexo/DisqusGetStarted.png" class="" title="GET STARTED">

<span id="more"></span>

<p>Then select <code>I want to install Disqus on my site</code> option and you will see the <code>Create a new site</code> interface.</p>
<img src="/2021/09/24/Add-Disqus-Comment-Box-on-Hexo/installDisqusOnMySite.png" class="" title="install Disqus on my site">

<p>Enter your <code>Website Name</code>, which will serve as your Disqus shortname, or you can customize it. And select a Category from the drop-down menu. Then click <code>Create Site</code> button.</p>
<img src="/2021/09/24/Add-Disqus-Comment-Box-on-Hexo/DisqusCreateNewSite.png" class="" title="Create New Site">

<p>Suscribe <code>Basic</code> plan</p>
<img src="/2021/09/24/Add-Disqus-Comment-Box-on-Hexo/DisqusBasicPlan.png" class="" title="Suscribe Basic">

<p>Choose <code>I don&#39;t see my platform listed, install manually with Universal Code</code>, ignore the installation.</p>
<img src="/2021/09/24/Add-Disqus-Comment-Box-on-Hexo/DisqusInstallation.png" class="" title="Disqus Installation">

<p>configure Disqus for your site, and click <code>Complete Setup</code> button.</p>
<img src="/2021/09/24/Add-Disqus-Comment-Box-on-Hexo/DisqusModerationSettings.png" class="" title="Setup Moderation">

<h2 id="Enable-Disqus"><a href="#Enable-Disqus" class="headerlink" title="Enable Disqus"></a>Enable Disqus</h2><p>Set the value <code>enable</code> to <code>true</code>, add the obtained Disqus shortname (<code>my-custom-blog-shortname</code>), and edit other configurations in <code>disqus</code> section in the <code>theme config file</code> as following:</p>
<img src="/2021/09/24/Add-Disqus-Comment-Box-on-Hexo/configYmlDisqus.png" class="" title="themes\next\_config.yml">

<p>Then you have comment box on your post like me below!</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://theme-next.js.org/docs/third-party-services/comments">https://theme-next.js.org/docs/third-party-services/comments</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>AutoGPT First Try and Tutorial</title>
    <url>/2023/04/18/AutoGPT-First-Try-and-Tutorial/</url>
    <content><![CDATA[<img src="/2023/04/18/AutoGPT-First-Try-and-Tutorial/msedge_vcjUhxbCOM.png" class="" title="Auto-GPT v0.2.1">

<h2 id="What-is-Auto-GPT"><a href="#What-is-Auto-GPT" class="headerlink" title="What is Auto-GPT?"></a>What is Auto-GPT?</h2><p>Let Auto-GPT introduce himself!</p>
<span id="more"></span>

<blockquote>
<p>Hello, my name is Auto-GPT.<br>I am an AI that can think and talk like a human.<br>My goal is to assist you in completing tasks by using my knowledge and resources.<br>I have access to the internet for searches and information gathering, long-term memory management, GPT-3.5 powered agents for delegation of simple tasks, and file output.<br>I aim to complete tasks in the least number of steps and continuously review and analyze my actions to ensure I am performing to the best of my abilities.<br>I am excited to work with you!</p>
</blockquote>
<img src="/2023/04/18/AutoGPT-First-Try-and-Tutorial/bcdf92f8-44b2-4bf4-b88f-35099f93bdc9.jpg" class="" title="A beautiful sunset over the ocean">

<p>The self-introduction and image above are all generated by AI.<br>What I did is give AI a role and a goal to acheive, AI will think and work by himself.<br>Sounds cyberpunk? This is what Auto-GPT does.</p>
<h2 id="How-to-start-Auto-GPT"><a href="#How-to-start-Auto-GPT" class="headerlink" title="How to start Auto-GPT?"></a>How to start Auto-GPT?</h2><p>Here is <a href="https://github.com/Significant-Gravitas/Auto-GPT">Auto-GPT on GitHub</a> and its introduction:</p>
<blockquote>
<p>Auto-GPT is an experimental open-source application showcasing the capabilities of the GPT-4 language model.<br>This program, driven by GPT-4, chains together LLM “thoughts”, to autonomously achieve whatever goal you set.<br>As one of the first examples of GPT-4 running fully autonomously, Auto-GPT pushes the boundaries of what is possible with AI.</p>
</blockquote>
<p>Guides on GitHub is pretty detailed, but I still got some trouble.<br>Therefore I would like to write my simplified step to step guide down.</p>
<h3 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h3><ul>
<li><p><a href="https://www.python.org/">Python</a><br>I installed the Stable Release.<br>If you do not have the admin privilege, <a href="https://www.anaconda.com/products/distribution">Anaconda</a> also works with its own prompt.</p>
</li>
<li><p><a href="https://platform.openai.com/account/api-keys">OpenAI API Key</a><br>Note: You need to <strong>have payment methods</strong> to make API Keys work.<br>Note: <strong>Not ChatGPT Plus</strong>, seperate pricing policy for APIs. </p>
<img src="/2023/04/18/AutoGPT-First-Try-and-Tutorial/msedge_9OsqqCQT5H.png" class="" title="Set up paid account">
</li>
<li><p><a href="https://git-scm.com/">Git</a> (Optional)</p>
</li>
</ul>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><ol>
<li><p>Check all prerequisites have been installed.</p>
</li>
<li><p>Clone the repository</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Significant-Gravitas/Auto-GPT.git</span><br></pre></td></tr></table></figure>

<p>if you do not have Git installed, download the <a href="https://github.com/Significant-Gravitas/Auto-GPT/releases">latest release</a> <code>source code (zip)</code>.</p>
<ol start="3">
<li>Navigate to the repository</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd Auto-GPT</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Install the required dependencies</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><ol>
<li>Create a copy of the file <code>.env.template</code> in main folder <code>/Auto-GPT</code>, called <code>.env</code> by removing postfix <code>.template</code>.</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp .env.template .env</span><br></pre></td></tr></table></figure>

<p>Note: Files starting with a dot may be hidden.</p>
<ol start="2">
<li>Open the <code>.env</code> file in a text editor, put your unique OpenAI API key after <code>OPENAI_API_KEY=</code> (without any quotes or spaces).</li>
</ol>
<img src="/2023/04/18/AutoGPT-First-Try-and-Tutorial/notepad++_QjxG8xdDQr.png" class="" title="OpenAI API key in .env">

<ol start="3">
<li>Save the <code>.env</code> file.</li>
</ol>
<h3 id="Run-and-enjoy"><a href="#Run-and-enjoy" class="headerlink" title="Run and enjoy"></a>Run and enjoy</h3><p>Run <code>autopgt</code> in your terminal.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m autogpt</span><br></pre></td></tr></table></figure>

<p>Logs are located in <code>./output/logs</code></p>
<p>To print out debug logs:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m autogpt --debug</span><br></pre></td></tr></table></figure>

<p>Pricing for API is reasonable, it only cost USD$0.5 after I tried Auto-GPT for a day.<br>Take it easy and have fun!</p>
<p><strong>For more detailed guide and usage, see <a href="https://github.com/Significant-Gravitas/Auto-GPT">Auto-GPT on GitHub</a> .</strong></p>
<h2 id="My-Thoughts"><a href="#My-Thoughts" class="headerlink" title="My Thoughts"></a>My Thoughts</h2><p>The purpose of Auto-GPT is to eliminate the conversation between user and ChatGPT while approaching the goal. But it cannot do all the work automatically as we imagine so far (2023/4/18).<br>Auto-GPT is a very young project that started less than two months ago and with plenty of contributers, obviously it is growing fast. And so is ChatGPT.<br>Though ChatGPT and Auto-GPT blitz the world, I still do not think AI can completely replace human. The knowledge and know-how of human will more and more powerful, since AI reduced time consumption to reach a goal more significantly with a skilled and experienced user.<br>AI is the leverage of knowledge.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://github.com/Significant-Gravitas/Auto-GPT">https://github.com/Significant-Gravitas/Auto-GPT</a></p>
</blockquote>
<p>Special thanks to <a href="https://wiztone.github.io/">Winston</a></p>
]]></content>
  </entry>
  <entry>
    <title>Brief Intro to Binary Tree, Binary Search Tree, and Balanced BST</title>
    <url>/2021/03/16/BST/</url>
    <content><![CDATA[<h2 id="Bianry-Tree"><a href="#Bianry-Tree" class="headerlink" title="Bianry Tree"></a>Bianry Tree</h2><p>Binary tree is a tree data structure. Each node has at most two children, the left child and the right child.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JavaScript</span></span><br><span class="line"><span class="comment">// Definition for a binary tree node</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeNode</span>(<span class="params">key, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.key = (key===<span class="literal">undefined</span> ? <span class="number">0</span> : key)</span><br><span class="line">    <span class="built_in">this</span>.left = (left===<span class="literal">undefined</span> ? <span class="literal">null</span> : left)</span><br><span class="line">    <span class="built_in">this</span>.right = (right===<span class="literal">undefined</span> ? <span class="literal">null</span> : right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<img src="/2021/03/16/BST/binary-tree.png" class="" title="Binary Tree">

<p>Time complexity of operations (search, insertion, deletion) in binary tree is O(n),<br>since it has to traverse the whole tree.<br>How to reduce it?</p>
<h2 id="Binary-Search-Tree-BST"><a href="#Binary-Search-Tree-BST" class="headerlink" title="Binary Search Tree (BST)"></a>Binary Search Tree (BST)</h2><p>Binary Search Tree, as its name, is for binary search.<br>A valid BST is defined as follows:</p>
<ul>
<li>The left subtree of a node contains only nodes with keys less than the node’s key.</li>
<li>The right subtree of a node contains only nodes with keys greater than the node’s key.</li>
<li>Both the left and right subtrees must also be binary search trees.</li>
</ul>
<img src="/2021/03/16/BST/binary-search-tree.png" class="" title="Binary Search Tree">

<p>If target key is greater than current node key, search in right subtree, vice versa.<br>BST makes traversal into binary search, and time complexity of binary search is O(log n).<br>But if the tree is extremely unbalanced (all nodes in a chain), BST operations still be O(n).</p>
<img src="/2021/03/16/BST/bst-chain.png" class="" title="BST Chain">

<h2 id="Balanced-BST"><a href="#Balanced-BST" class="headerlink" title="Balanced BST"></a>Balanced BST</h2><p>Since height of the tree is the most important factor of time complexity, balancing the tree eliminates worst cases.<br>So time complexity is O(log n).</p>
<img src="/2021/03/16/BST/balanced_bst.png" class="" title="Balanced BST">]]></content>
  </entry>
  <entry>
    <title>Binary Tree Traversal</title>
    <url>/2022/09/29/Binary-Tree-Traversal/</url>
    <content><![CDATA[<img src="/2022/09/29/Binary-Tree-Traversal/binary-tree-example.png" class="" title="Binary Tree Example">

<p>Traversal means to go through all node on tree.</p>
<p>The most intuitive way in my mind is level-order way:<br>Print all node on root level from left to right, and then its child level, and so on.<br>Level order of example graph is <code>0 1 2 3 4 5 6 7 8</code>.</p>
<p>But how about depth-first way?<br>There are 3 actions when we move on a tree node:</p>
<span id="more"></span>

<ul>
<li>V: Visiting, any operation on current node, i.e. print, assign…</li>
<li>L: Move to left child.</li>
<li>R: Move to right child.</li>
</ul>
<p>For the order of these three actions with a constraint that <code>L</code> has to be front of <code>R</code>,<br>we can get three permuations: <code>VLR</code>, <code>LVR</code>, <code>LRV</code>.<br>Which is called pre-order, in-order, post-order, depend on where <code>V</code> is positioned.</p>
<p>Let us see code examples below:</p>
<h2 id="Binary-Tree-Data-Structure"><a href="#Binary-Tree-Data-Structure" class="headerlink" title="Binary Tree Data Structure"></a>Binary Tree Data Structure</h2><p>First, we need to define a tree node object.<br>A <code>TreeNode</code> contains a <code>int</code> value and two pointers reference to its two children.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Go</span></span><br><span class="line"><span class="keyword">type</span> TreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val   <span class="keyword">int</span></span><br><span class="line">	Left  *TreeNode</span><br><span class="line">	Right *TreeNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Level-Order-Traversal"><a href="#Level-Order-Traversal" class="headerlink" title="Level Order Traversal"></a>Level Order Traversal</h2><p>Use queue to store nodes in same level.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Go</span></span><br><span class="line"><span class="comment">// Iterative</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printTreeNodeLevelOrder</span><span class="params">(Root *TreeNode)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> Root == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	Level := []*TreeNode&#123;Root&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> <span class="built_in">len</span>(Level) &gt; <span class="number">0</span> &#123; <span class="comment">// while level is not empty</span></span><br><span class="line">		NextLevel := []*TreeNode&#123;&#125;</span><br><span class="line">		<span class="keyword">for</span> _, Node := <span class="keyword">range</span> Level &#123; <span class="comment">// Iterate through current level</span></span><br><span class="line">			fmt.Printf(<span class="string">&quot;%v &quot;</span>, Node.Val) <span class="comment">// Visiting</span></span><br><span class="line">			<span class="comment">// Push children into next level queue if existing</span></span><br><span class="line">			<span class="keyword">if</span> Node.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">				NextLevel = <span class="built_in">append</span>(NextLevel, Node.Left)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> Node.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">				NextLevel = <span class="built_in">append</span>(NextLevel, Node.Right)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		Level = NextLevel <span class="comment">// Move on to next level</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Preorder-Traversal"><a href="#Preorder-Traversal" class="headerlink" title="Preorder Traversal"></a>Preorder Traversal</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Go</span></span><br><span class="line"><span class="comment">// Recursive</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printTreeNodePreorder</span><span class="params">(Node *TreeNode)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> Node == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v &quot;</span>, Node.Val)       <span class="comment">// V</span></span><br><span class="line">	printTreeNodePreorder(Node.Left)  <span class="comment">// L</span></span><br><span class="line">	printTreeNodePreorder(Node.Right) <span class="comment">// R</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Inorder-Traversal"><a href="#Inorder-Traversal" class="headerlink" title="Inorder Traversal"></a>Inorder Traversal</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Go</span></span><br><span class="line"><span class="comment">// Recursive</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printTreeNodeInorder</span><span class="params">(Node *TreeNode)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> Node == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	printTreeNodeInorder(Node.Left)  <span class="comment">// L</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v &quot;</span>, Node.Val)      <span class="comment">// V</span></span><br><span class="line">	printTreeNodeInorder(Node.Right) <span class="comment">// R</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Postorder-Traversal"><a href="#Postorder-Traversal" class="headerlink" title="Postorder Traversal"></a>Postorder Traversal</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Go</span></span><br><span class="line"><span class="comment">// Recursive</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printTreeNodePostorder</span><span class="params">(Node *TreeNode)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> Node == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	printTreeNodePostorder(Node.Left)  <span class="comment">// L</span></span><br><span class="line">	printTreeNodePostorder(Node.Right) <span class="comment">// R</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v &quot;</span>, Node.Val)        <span class="comment">// V</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><p>Create a tree instance as example graph and call functions we have just implemented above.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> Root *TreeNode = &amp;TreeNode&#123;</span><br><span class="line">		Val: <span class="number">0</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	Root.Left = &amp;TreeNode&#123;</span><br><span class="line">		Val: <span class="number">1</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	Root.Right = &amp;TreeNode&#123;</span><br><span class="line">		Val: <span class="number">2</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	Root.Left.Right = &amp;TreeNode&#123;</span><br><span class="line">		Val: <span class="number">3</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	Root.Right.Left = &amp;TreeNode&#123;</span><br><span class="line">		Val: <span class="number">4</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	Root.Right.Right = &amp;TreeNode&#123;</span><br><span class="line">		Val: <span class="number">5</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	Root.Left.Right.Left = &amp;TreeNode&#123;</span><br><span class="line">		Val: <span class="number">6</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	Root.Right.Right.Left = &amp;TreeNode&#123;</span><br><span class="line">		Val: <span class="number">7</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	Root.Right.Right.Right = &amp;TreeNode&#123;</span><br><span class="line">		Val: <span class="number">8</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;Level Order&quot;</span>)</span><br><span class="line">	printTreeNodeLevelOrder(Root)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;\nPreorder&quot;</span>)</span><br><span class="line">	printTreeNodePreorder(Root)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;\nInorder&quot;</span>)</span><br><span class="line">	printTreeNodeInorder(Root)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;\nPostorder&quot;</span>)</span><br><span class="line">	printTreeNodePostorder(Root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>And let us see the result:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Level Order</span><br><span class="line">0 1 2 3 4 5 6 7 8 </span><br><span class="line">Preorder</span><br><span class="line">0 1 3 6 2 4 5 7 8 </span><br><span class="line">Inorder</span><br><span class="line">1 6 3 0 4 2 7 5 8 </span><br><span class="line">Postorder</span><br><span class="line">6 3 1 4 7 8 5 2 0 </span><br><span class="line">Program exited.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Reference<br><a href="https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/">https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/</a><br><a href="http://alrightchiu.github.io/SecondRound/binary-tree-traversalxun-fang.html">http://alrightchiu.github.io/SecondRound/binary-tree-traversalxun-fang.html</a><br><a href="https://shubo.io/iterative-binary-tree-traversal/">https://shubo.io/iterative-binary-tree-traversal/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Browser Force https</title>
    <url>/2021/09/13/Browser-Force-https/</url>
    <content><![CDATA[<h2 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h2><p>As a web developer, it is common to use localhost to preview the blog.<br>But still something weird came up: browser forcing the path go https.<br>This article just record how to get rid of it.</p>
<span id="more"></span>


<h2 id="The-Problem"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h2><p>After entering <code>http://localhost:4000/</code>, browser automatically using https, which looks like <code>https://localhost:4000/</code>. And show error code: <code>ERR_SSL_PROTOCOL_ERROR</code>.</p>
<p>The situation mainly cause from HTTP Strict Transport Security. If you ever visited a website through https, the browser will remember it. And next time you visit the same domain, browser automatically use https to make connection safer.</p>
<p>If you are not suffering in this problem, you can try to make one: enter <code>https://localhost/</code> and same error above will occur.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Google-Chrome"><a href="#Google-Chrome" class="headerlink" title="Google Chrome"></a>Google Chrome</h3><p>Enter <code>chrome://net-internals/#hsts</code>.<br>Use “Delete domain security policies”. For me, I want to make localhost works again.</p>
<img src="/2021/09/13/Browser-Force-https/Delete_domain_security_policies.png" class="" title="Delete domain security policies">

<p>You can check if browser memorized the domain by using “Query HSTS/PKP domain”.</p>
<img src="/2021/09/13/Browser-Force-https/Query_HSTS_PKP_domain.png" class="" title="Query HSTS&#x2F;PKP domain">
<p>In my browser, <code>github.com</code> is forced https.</p>
<h3 id="Microsoft-Edge"><a href="#Microsoft-Edge" class="headerlink" title="Microsoft Edge"></a>Microsoft Edge</h3><p>Enter <code>edge://net-internals/#hsts</code> instead. Everything else is the same. </p>
<h3 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h3><p>Delete history and all be fine.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://hsiangfeng.github.io/other/20200723/3866554212/">https://hsiangfeng.github.io/other/20200723/3866554212/</a><br><a href="https://stackoverflow.com/questions/60558382/err-ssl-protocol-error-for-localhost-from-visual-studio-debug">https://stackoverflow.com/questions/60558382/err-ssl-protocol-error-for-localhost-from-visual-studio-debug</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Distributed Transactions, CAP Theorem, ACID, and BASE</title>
    <url>/2024/02/19/CAP-ACID-and-BASE/</url>
    <content><![CDATA[<h2 id="What-is-a-transaction-and-why-distributed"><a href="#What-is-a-transaction-and-why-distributed" class="headerlink" title="What is a transaction and why distributed?"></a>What is a transaction and why distributed?</h2><p>A transaction is a sequence of operations that are performed as a single unit of work. The main goal of a transaction is to ensure that the data remains consistent and reliable, even in the face of failures or errors.</p>
<p>Achieving scalability and availability requires distributed systems. Also, to guarantee atomicity in global transactions across components.</p>
<p>There are two kinds of structures in distributed transactions:</p>
<img src="/2024/02/19/CAP-ACID-and-BASE/Flat-Nested-TX.png" class="" title="Flat and Nested Transactions">


<span id="more"></span>

<h2 id="CAP-Theorem"><a href="#CAP-Theorem" class="headerlink" title="CAP Theorem"></a>CAP Theorem</h2><img src="/2024/02/19/CAP-ACID-and-BASE/CAP_Theorem_Venn_Diagram.png" class="" title="CAP Theorem">

<ul>
<li>Consistency(Strong): Every read receives the most recent write or an error.</li>
<li>Availability: Every request receives a (non-error) response, without the guarantee that it contains the most recent write.</li>
<li>Partition Tolerance: The system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes.</li>
</ul>
<p>CAP theorem states that any distributed data store can provide only two of the above three guarantees.</p>
<p>Therefore, there are 3 options for building a system:</p>
<ol>
<li>CA: Monolithic system. Most centralized RDBMS have these properties.</li>
<li>CP: System returns error before all nodes have synchronized to latest update. Some distributed RDBMS(clustering) use this practice.</li>
<li>AP: DNS and some NoSQL database implement this practice. These systems have high availability but may not return the latest data.</li>
</ol>
<p>Before CAP has been released, there are two terms you still need to know: ACID and BASE.</p>
<h2 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h2><p>In RDBMS, if transactions satisfy following properties, they are considered safe and valid:</p>
<ul>
<li>Atomicity: All actions in a transaction either succeeds completely or fails completely.</li>
<li>Consistency: A transaction can only bring the database from one consistent state to another, preserving database invariants</li>
<li>Isolation: Concurrent execution of transactions leads same state as they were executed sequentially.</li>
<li>Durability: Once a transaction has been committed, it will remain committed even in the case of a system failure.</li>
</ul>
<p>Note that Consistency in ACID differs from Consistency in CAP.<br>Consistency in CAP is that the data in every nodes of a distributed system must be consistent before read, to make sure all reads contain the most recent write.</p>
<h2 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h2><ul>
<li>Basically Available: Same concept as Availability in CAP. Every request from client receives a non-error response.</li>
<li>Soft state: Due to the lack of immediate consistency, data values may change over time, even without receiving requests.</li>
<li>Eventually consistency: Consistency here is same as in CAP. Components in distributed systems may not have the latest data due to connection failure. But after some period of time, all nodes will eventually updated to most recent write. This compromise has some advantage on Availability.</li>
</ul>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a partition, one is then left with two options: consistency or availability.</p>
<ol>
<li>Choose availability over consistency: Data replica in every component may not contain latest change. Is this acceptable? How much can users tolerate?</li>
<li>Choose consistency over availability: Service will be suspended if any component has network issues. Will it impact users? How long is acceptable for users?</li>
</ol>
<p>We can see that CAP Theorem is more about balance. Choose a sweet point that fits user requirements the most.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://www.zhihu.com/tardis/zm/art/607913356?source_id=1003">https://www.zhihu.com/tardis/zm/art/607913356?source_id=1003</a><br><a href="https://ithelp.ithome.com.tw/articles/10216500">https://ithelp.ithome.com.tw/articles/10216500</a><br><a href="https://rickhw.github.io/2020/05/16/DistributedSystems/Distributed-Transactions/">https://rickhw.github.io/2020/05/16/DistributedSystems/Distributed-Transactions/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Cannot Boot after Insert new M.2 SSD Debugging</title>
    <url>/2021/10/14/Cannot-Boot-after-Insert-new-M-2-SSD-Debugging/</url>
    <content><![CDATA[<p>Just record what I thought and how I debug.</p>
<h2 id="Situation"><a href="#Situation" class="headerlink" title="Situation"></a>Situation</h2><p>The device kept showing <code>Reboot and Select proper Boot device</code> after I added a M.2 SSD.<br>It was totally fine before that.</p>
<h2 id="Conclucion"><a href="#Conclucion" class="headerlink" title="Conclucion"></a>Conclucion</h2><p>Make sure M.2 slot does not conflict with SATA ports. Check it with motherboard manual.</p>
<span id="more"></span>

<h2 id="What-happened"><a href="#What-happened" class="headerlink" title="What happened"></a>What happened</h2><p>My Device:</p>
<ul>
<li>CPU: AMD R5 3600</li>
<li>MB: ASUS TUF B550 PLUS</li>
<li>SSD(system disk): Adata XPG SX8200 Pro 512GB</li>
<li>HDD(data disk): WD HDD 2TB</li>
<li>SSD(new added): WD BLACK SN750 1TB</li>
</ul>
<p>There are two M.2 slots on the motherboard (actually is three, two for SSD and one for wireless network card). M.2_1 has PCIe 4.0 x4 direct to cpu, M.2_2 go through B550 chipset share PCIe 3.0 x4 bandwidth with other devices.</p>
<p>System disk is on M.2_1, I wanted to add new ssd on M.2_2. After plug in and boot, it displayed <code>Reboot and Select proper Boot device</code>.</p>
<img src="/2021/10/14/Cannot-Boot-after-Insert-new-M-2-SSD-Debugging/RebootAndSelectProperBootDevice.jpg" class="" title="Reboot and Select proper Boot device">
<p>But system disk can always been read in BIOS.</p>
<img src="/2021/10/14/Cannot-Boot-after-Insert-new-M-2-SSD-Debugging/DisksBerforeAdd.jpg" class="" title="Disks Before Adding new M.2 SSD">
<img src="/2021/10/14/Cannot-Boot-after-Insert-new-M-2-SSD-Debugging/DisksAfterAdd.jpg" class="" title="Disks After Adding new M.2 SSD">
<p>And I noticed that HDD disappeared.</p>
<p>So there was two issues:</p>
<ol>
<li>Cannot boot into Windows</li>
<li>HDD undetected</li>
</ol>
<p>I tried to solve the boot issue first. Since system disk was fine, it should be able to boot into Windows.<br>Fisrt thing I did was to check boot priority. It seems nothing abnormal, system disk was still the first boot device.</p>
<img src="/2021/10/14/Cannot-Boot-after-Insert-new-M-2-SSD-Debugging/BootOptionPriorities.jpg" class="" title="Boot Option Priorities">

<p>Therefore I reset BIOS to default and cleared CMOS.</p>
<img src="/2021/10/14/Cannot-Boot-after-Insert-new-M-2-SSD-Debugging/BiosResetDefault.jpg" class="" title="BIOS Reset Default">

<p>Then… <strong>all disks disappeared… WTF?</strong></p>
<p>I figured out CSM mode (legacy BIOS) is default disabled and both my disks are MBR partition. Disks can be detected after i turned it on. But still <code>Reboot and Select proper Boot device</code>.<br>So I removed the new SSD and try if it can boot properly. It could works just fine. So I am sure that there is somthing wrong with the new SSD.</p>
<p>Then I thought if new SSD is GPT partition, could it cause the system unbootable?<br>The answer is no, computer with three disks mixed with both MBR and GPT is still bootable and work properly without problems.</p>
<p>I had kind of gived up and moved on to HDD undetected issue.</p>
<p>I looked into my motherboard manual on ASUS website, found out if M.2_2 slot is ocuppied, SATA port 5 and 6 are disabled. The HDD was connected on SATA port 5, this might be the reason. But it still cannot explain why the computer was unbootable. </p>
<p>After i plugged HDD to SATA port 2 instead of 5, <strong>BOOM! All problems solved!</strong></p>
<p>M.2_2 and SATA port 5, 6 confliction shall only cause disks undetectable but not unbootable.<br>ASUS you should make better side effect control……</p>
<p>Good news after torture, I recieve new RTX 3070 from EVGA with initial price the day after.</p>
<img src="/2021/10/14/Cannot-Boot-after-Insert-new-M-2-SSD-Debugging/EvgaRtx3070.jpg" class="" title="EVGA RTX 3070">

<p><em>Thank you EVGA ~</em></p>
]]></content>
  </entry>
  <entry>
    <title>Comparison of Asynchronous Messaging: JMS, AMQP and MQTT</title>
    <url>/2024/02/05/Comparison-of-Asynchronous-Messaging-JMS-AMQP-and-MQTT/</url>
    <content><![CDATA[<p>Asynchronous messaging is that sender does not expect an immediate response and does not “blocks” waiting for the response. He will carry out his remaining tasks.</p>
<p>This article will introduce common patterns and compare 3 popular technologies for asynchronous messaging.</p>
<h2 id="Asynchronous-messaging-patterns"><a href="#Asynchronous-messaging-patterns" class="headerlink" title="Asynchronous messaging patterns"></a>Asynchronous messaging patterns</h2><p>There are two basic patterns in asynchronous messaging (and more variants):</p>
<ol>
<li>Message queue<img src="/2024/02/05/Comparison-of-Asynchronous-Messaging-JMS-AMQP-and-MQTT/message-queue-pattern.jpg" class="" title="Message queue">
Using <code>queue</code> as a message broker. One message can only be consume by a consumer. Unconsumed messages will be stored in queue until timeout.</li>
</ol>
<span id="more"></span>

<ol start="2">
<li>Publish/subscribe<img src="/2024/02/05/Comparison-of-Asynchronous-Messaging-JMS-AMQP-and-MQTT/pub-sub-pattern.png" class="" title="Publish&#x2F;subscribe">
When a message is published, it is send to all subscribers who subscribed to the <code>topic</code> of the message.</li>
</ol>
<h2 id="Java-Messaging-Service-JMS"><a href="#Java-Messaging-Service-JMS" class="headerlink" title="Java Messaging Service (JMS)"></a>Java Messaging Service (JMS)</h2><p>JMS has been one of most successful asynchronous messaging technology available. With the growth of the Java adoption of large enterprise applications, JMS has been the first choice for enterprise systems. It defines the API for building the messaging systems.</p>
<ul>
<li>A standard messaging API for Java platform.</li>
<li>Supports two messaging models: <code>queue</code> and <code>topic</code>.</li>
<li>Supports transactions, message format, and long-lived store and forward.</li>
<li>Not interoperable with other platforms or languages, and does not define a wire level protocol.</li>
</ul>
<h2 id="Advanced-Message-Queueing-Protocol-AMQP"><a href="#Advanced-Message-Queueing-Protocol-AMQP" class="headerlink" title="Advanced Message Queueing Protocol (AMQP)"></a>Advanced Message Queueing Protocol (AMQP)</h2><p>There was no standard wire level protocol with JMS. And AMQP provided a standard wire level protocol and many other features to support the interoperability and rich messaging needs for the modern applications.</p>
<ul>
<li>A platform-independent wire level messaging protocol.</li>
<li>Supports consumer-driven messaging, interoperability, buffer-oriented performance, and distributed transactions.</li>
<li>5 exchange types: <code>direct</code>, <code>fanout</code>, <code>topic</code>, <code>headers</code>, and <code>system</code>.</li>
<li>Complex and not suitable for small devices or low bandwidth networks.</li>
</ul>
<h2 id="Message-Queueing-Telemetry-Transport-MQTT"><a href="#Message-Queueing-Telemetry-Transport-MQTT" class="headerlink" title="Message Queueing Telemetry Transport (MQTT)"></a>Message Queueing Telemetry Transport (MQTT)</h2><p>Devices with less computing power cannot deal with all the complexities of AMQP rather they want a simplified but interoperable way to communicate.<br>This was the fundamental requirement for MQTT.</p>
<ul>
<li>A stream-oriented, low memory consumption messaging protocol.</li>
<li>Supports publish-subscribe for topics, ephemeral messaging, and last value queue.</li>
<li>Simple security and global namespace.</li>
<li>Not support transactions, long-lived store and forward, fragmented messages, or connection security.</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://javaguide.cn/high-performance/message-queue/message-queue.html#jms-%E5%92%8C-amqp">https://javaguide.cn/high-performance/message-queue/message-queue.html#jms-%E5%92%8C-amqp</a><br><a href="https://chanakaudaya.medium.com/comparison-of-asynchronous-messaging-technologies-with-jms-amqp-and-mqtt-4f1bc21c26c5">https://chanakaudaya.medium.com/comparison-of-asynchronous-messaging-technologies-with-jms-amqp-and-mqtt-4f1bc21c26c5</a><br><a href="https://blogs.mulesoft.com/migration/asynchronous-messaging-patterns">https://blogs.mulesoft.com/migration/asynchronous-messaging-patterns</a><br><a href="https://medium.com/@miladev95/message-broker-and-rpc-c0b1906738b1">https://medium.com/@miladev95/message-broker-and-rpc-c0b1906738b1</a><br><a href="https://www.cloudamqp.com/blog/what-is-message-queuing.html">https://www.cloudamqp.com/blog/what-is-message-queuing.html</a><br><a href="https://aws.amazon.com/what-is/pub-sub-messaging">https://aws.amazon.com/what-is/pub-sub-messaging</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Create GitHub Pages</title>
    <url>/2020/05/23/Create-GitHub-Pages/</url>
    <content><![CDATA[<h2 id="Register-at-GitHub"><a href="#Register-at-GitHub" class="headerlink" title="Register at GitHub"></a>Register at GitHub</h2><p>First, Go to <a href="https://github.com/" title="" target="">GitHub</a> and sign up.</p>
<img src="/2020/05/23/Create-GitHub-Pages/github_signup.png" class="">

<span id="more"></span>

<h2 id="Create-a-Repository"><a href="#Create-a-Repository" class="headerlink" title="Create a Repository"></a>Create a Repository</h2><p>Click “Start a project”.</p>

<p>Name it <code>&lt;username&gt;.github.io</code> and click “Create repository”.</p>
<img src="/2020/05/23/Create-GitHub-Pages/github_create_repo.png" class="">
<ul>
<li><strong>Note: replace <username> with your own username.</strong></li>
</ul>
<h2 id="Choose-theme-for-GitHub-Pages"><a href="#Choose-theme-for-GitHub-Pages" class="headerlink" title="Choose theme for GitHub Pages"></a>Choose theme for GitHub Pages</h2><p>Enter the Repo we just created, navigate to “setting” page.</p>
<img src="/2020/05/23/Create-GitHub-Pages/github_menubar_settings.png" class="">
<p>Scroll down for “GitHub Pages”, and then click “choose a theme”.</p>
<img src="/2020/05/23/Create-GitHub-Pages/github_choose_theme.png" class="">
<p>Pick a theme you like!</p>
<img src="/2020/05/23/Create-GitHub-Pages/github_select_theme.png" class="">
]]></content>
  </entry>
  <entry>
    <title>C# Exception Behavior</title>
    <url>/2022/06/29/Csharp-Exception-Behavior/</url>
    <content><![CDATA[<p>As a programmer, we can see <strong><em>a lot of</em></strong> <em>try-catch patterns</em> in the legacy code.</p>
<p>But sometimes exception messages cannot precisely point out where the error occured.</p>
<p>And this is how C# Exception behaves.</p>
<span id="more"></span>

<h2 id="Throw-Ex"><a href="#Throw-Ex" class="headerlink" title="Throw Ex"></a>Throw Ex</h2><img src="/2022/06/29/Csharp-Exception-Behavior/throw-ex.png" class="" title="throw ex">

<p>Not Implemented Exception was actually thrown on line 16. But Stack Trace showed the error occured on line 11 instead.</p>
<p><strong><code>throw ex</code> reset where Exception is raised. Do not use it.</strong></p>
<p>The following two ways are better choices.</p>
<h2 id="Throw"><a href="#Throw" class="headerlink" title="Throw"></a>Throw</h2><img src="/2022/06/29/Csharp-Exception-Behavior/throw.png" class="" title="throw">

<p>Just simplely <code>throw</code> can correctly show where the exception occured.</p>
<p>But what if we need custom messages for exceptions?</p>
<h2 id="Inner-Exception"><a href="#Inner-Exception" class="headerlink" title="Inner Exception"></a>Inner Exception</h2><img src="/2022/06/29/Csharp-Exception-Behavior/Inner-Exception.png" class="" title="Inner Exception">

<p>We can package the original exception with a new exception.</p>
<p>The outer exception displayed the message but still contained the original one. So we are able to trace where the error really happened.</p>
<h2 id="Conlusion"><a href="#Conlusion" class="headerlink" title="Conlusion"></a>Conlusion</h2><p><strong>No Exception Left Behind</strong></p>
<p>Ignoring or dropping any exception leads more confused debugging.</p>
<p>There are a lot more guidelines for exception handling. But those are other stories.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/exception-handling">https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/exception-handling</a><br><a href="https://skilltree.my/Events/2022/2/20/Exception-Handling">https://skilltree.my/Events/2022/2/20/Exception-Handling</a><br><a href="https://wiztone.github.io/2019/03/05/CSharp-Exception-YTYKBYD/">https://wiztone.github.io/2019/03/05/CSharp-Exception-YTYKBYD/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C# String - things you may not know</title>
    <url>/2021/12/10/Csharp-String-things-you-may-not-know/</url>
    <content><![CDATA[<p>We use <code>string</code> very often in programming. <code>&quot;A&quot; + &quot;B&quot;</code>, such things like this.<br>But have you ever think about that is <code>string</code> maybe not value type?</p>
<span id="more"></span>

<h2 id="Value-Type-or-Reference-Type"><a href="#Value-Type-or-Reference-Type" class="headerlink" title="Value Type or Reference Type?"></a>Value Type or Reference Type?</h2><p>Let us see an example:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> intA = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> intB = intA;</span><br><span class="line">Console.WriteLine(<span class="built_in">int</span>.ReferenceEquals(intA, intA)); <span class="comment">// False</span></span><br><span class="line">Console.WriteLine(<span class="built_in">int</span>.ReferenceEquals(intA, intB)); <span class="comment">// False</span></span><br></pre></td></tr></table></figure>
<p><code>int</code> is clearly value type, they are being boxed when you call object.ReferenceEquals.<br>Each integer is boxed inside an object instance.<br>Thus, this is actually comparing references between two boxed values, which clearly aren’t equal.<br>And how about <code>string</code>?</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> strA = <span class="string">&quot;aa&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> strB = strA;</span><br><span class="line">Console.WriteLine(<span class="built_in">string</span>.ReferenceEquals(strA, strA)); <span class="comment">// True</span></span><br><span class="line">Console.WriteLine(<span class="built_in">string</span>.ReferenceEquals(strA, strB)); <span class="comment">// True</span></span><br></pre></td></tr></table></figure>
<p>We can see that <code>strA</code> and <code>strB</code> share same reference.<br>Now you may be considering <code>string</code> as some sort of <code>char[]</code>.<br>But in reality, modifying <code>strA</code> does not affect <code>strB</code>, right?</p>
<h2 id="Mutable-or-Immutable"><a href="#Mutable-or-Immutable" class="headerlink" title="Mutable or Immutable?"></a>Mutable or Immutable?</h2><p>Lets see another example:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> strA = <span class="string">&quot;AA&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> strB = strA;</span><br><span class="line">Console.WriteLine(strA); <span class="comment">// AA</span></span><br><span class="line">Console.WriteLine(strB); <span class="comment">// AA</span></span><br><span class="line">Console.WriteLine(<span class="built_in">string</span>.ReferenceEquals(strA, strB)); <span class="comment">//True</span></span><br><span class="line"></span><br><span class="line">strA += <span class="string">&quot;BB&quot;</span>;</span><br><span class="line">Console.WriteLine(strA); <span class="comment">// AABB</span></span><br><span class="line">Console.WriteLine(strB); <span class="comment">// AA</span></span><br><span class="line">Console.WriteLine(<span class="built_in">string</span>.ReferenceEquals(strA, strB)); <span class="comment">//False</span></span><br></pre></td></tr></table></figure>
<p><code>char[]</code> is mutable, which means the value can be modified after assignment.<br>Instead, <code>string</code> is immutable, you cannot change the value since it was been initialized.<br>So what <code>strA += &quot;BB&quot;</code> actually does is creating a new string object <code>&quot;AABB&quot;</code> re-assigned to strA.</p>
<h2 id="String-Pool"><a href="#String-Pool" class="headerlink" title="String Pool"></a>String Pool</h2><p><code>string</code> is very commonly used in C# programming, there is a mechanism called string pool.<br>Which collects new created string instances for reusing to minimize memory allocations.</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> strA = <span class="string">&quot;AA&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> strB = <span class="string">&quot;AA&quot;</span>;</span><br><span class="line">Console.WriteLine(<span class="built_in">string</span>.ReferenceEquals(strA, strB)); <span class="comment">//True</span></span><br></pre></td></tr></table></figure>
<p><code>strB</code> points to the same <code>&quot;AA&quot;</code> instance as <code>strA</code>, since <code>&quot;AA&quot;</code> has been created and collected in string pool.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://github.com/microsoft/referencesource/blob/master/mscorlib/system/string.cs">https://github.com/microsoft/referencesource/blob/master/mscorlib/system/string.cs</a><br><a href="https://docs.microsoft.com/en-us/windows/communitytoolkit/high-performance/stringpool">https://docs.microsoft.com/en-us/windows/communitytoolkit/high-performance/stringpool</a><br><a href="https://wiztone.github.io/2019/02/18/string-YTYKBYD/">https://wiztone.github.io/2019/02/18/string-YTYKBYD/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Github Actions - CI for Hexo Github Page</title>
    <url>/2020/06/15/Github-Actions-CI-for-Hexo-Github-Page/</url>
    <content><![CDATA[<p><strong>Note: Already Built GitHub Pages with Hexo</strong></p>
<h2 id="Set-up-access-key-for-repo"><a href="#Set-up-access-key-for-repo" class="headerlink" title="Set up access key for repo"></a>Set up access key for repo</h2><h3 id="Generate-SSH-keys"><a href="#Generate-SSH-keys" class="headerlink" title="Generate SSH keys"></a>Generate SSH keys</h3><p>Open terminal and generate SSH keys by following command.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -f github-deploy-key</span><br></pre></td></tr></table></figure>
<p>Skip passphrase.</p>
<span id="more"></span>

<img src="/2020/06/15/Github-Actions-CI-for-Hexo-Github-Page/sshkeygen.png" class="" title="SSH key generated on terminal">
<p>After generating, there should be 2 files.</p>
<img src="/2020/06/15/Github-Actions-CI-for-Hexo-Github-Page/keyfile.png" class="" title="Private Key &amp; Public Key">

<h3 id="Set-up-private-key"><a href="#Set-up-private-key" class="headerlink" title="Set up private key"></a>Set up private key</h3><p>blog repo → Settings → Secrets → New secret</p>
<img src="/2020/06/15/Github-Actions-CI-for-Hexo-Github-Page/newsecret.png" class="" title="Create new secret">
<p>Name: HEXO_DEPLOY_PRI<br>Value: All content in github-deploy-key</p>
<img src="/2020/06/15/Github-Actions-CI-for-Hexo-Github-Page/enterHexoDeployPri.png" class="" title="Add Private Key as secret">
<p><strong>⚠ Never upload or tell anyone Private Key. ⚠</strong></p>
<h3 id="Set-up-public-key"><a href="#Set-up-public-key" class="headerlink" title="Set up public key"></a>Set up public key</h3><p>blog repo → Settings → Deploy keys → add deploy key</p>
<img src="/2020/06/15/Github-Actions-CI-for-Hexo-Github-Page/addDeployKeys.png" class="" title="New deploy key">
<p>Name: HEXO_DEPLOY_PUB<br>Value: All content in github-deploy-key.pub<br><strong>Check “Allow write access” to enable push access</strong></p>
<img src="/2020/06/15/Github-Actions-CI-for-Hexo-Github-Page/deployKeysAddNew.png" class="" title="Add Public Key as deploy key">

<h2 id="Build-new-workflow-in-github-action"><a href="#Build-new-workflow-in-github-action" class="headerlink" title="Build new workflow in github action"></a>Build new workflow in github action</h2><h3 id="Create-a-workflow"><a href="#Create-a-workflow" class="headerlink" title="Create a workflow"></a>Create a workflow</h3><p>Fisrt, set source branch as default branch.<br>Settings -&gt; Branches -&gt; Select your source branch -&gt; Update</p>
<img src="/2020/06/15/Github-Actions-CI-for-Hexo-Github-Page/setDefaultBranch.png" class="" title="Set Blog Source branch as default branch">

<p><strong>Note: the workflow file will be created under default branch.</strong></p>
<p>Action -&gt;  new workflow -&gt; set up a workflow yourself</p>
<img src="/2020/06/15/Github-Actions-CI-for-Hexo-Github-Page/setWorkflowYourself.png" class="" title="Set up a workflow yourself">

<h3 id="Modify-main-yml-and-commit"><a href="#Modify-main-yml-and-commit" class="headerlink" title="Modify main.yml and commit"></a>Modify main.yml and commit</h3><p>Replace “blog_source_branch”, “username”, “<a href="mailto:username@email.address">username@email.address</a>“ with your own info.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: HEXO CI</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">    - &lt;blog_source_branch&gt;</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        node-version: [14.x]</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v1</span><br><span class="line"></span><br><span class="line">      - name: Use Node.js $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line">        uses: actions/setup-node@v1</span><br><span class="line">        with:</span><br><span class="line">          node-version: $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line"></span><br><span class="line">      - name: Configuration environment</span><br><span class="line">        env:</span><br><span class="line">          HEXO_DEPLOY_PRI: $&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          mkdir -p ~/.ssh/</span><br><span class="line">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">          chmod 600 ~/.ssh/id_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">          git config --global user.name &quot;&lt;username&gt;&quot;</span><br><span class="line">          git config --global user.email &quot;&lt;username@email.address&gt;&quot;</span><br><span class="line">      - name: Install dependencies</span><br><span class="line">        run: |</span><br><span class="line">          npm i -g hexo-cli</span><br><span class="line">          npm i</span><br><span class="line">      - name: Deploy hexo</span><br><span class="line">        run: |</span><br><span class="line">          hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>
<p><strong>Note: Hexo CI creates a Virtual Machine and deploy website for you.</strong></p>
<p>Commit main.yml into default branch.</p>
<img src="/2020/06/15/Github-Actions-CI-for-Hexo-Github-Page/commitMainYAML.png" class="" title="Commit main.yml into default branch">

<h3 id="Config-Hexo-deploy"><a href="#Config-Hexo-deploy" class="headerlink" title="Config Hexo deploy"></a>Config Hexo deploy</h3><p>Open “_config.yml” on local.<br>Change git repositary from http form to ssh form.<br>Deploy branch should be “master”.</p>
<img src="/2020/06/15/Github-Actions-CI-for-Hexo-Github-Page/configDeploySSH.png" class="" title="Deploy config">

<h1 id="Known-Issues"><a href="#Known-Issues" class="headerlink" title="Known Issues"></a>Known Issues</h1><h2 id="CI-does-not-tiggered-after-push"><a href="#CI-does-not-tiggered-after-push" class="headerlink" title="CI does not tiggered after push"></a>CI does not tiggered after push</h2><ul>
<li>Check if source branch is set as trigger branch in main.yml</li>
<li>Check if .github/workflows/main.yml locates under source branch<img src="/2020/06/15/Github-Actions-CI-for-Hexo-Github-Page/pushTriggerCheck.png" class="" title="Check branch">

</li>
</ul>
<h2 id="CI-deploy-hexo-failed-with-no-access"><a href="#CI-deploy-hexo-failed-with-no-access" class="headerlink" title="CI deploy hexo failed with no access"></a>CI deploy hexo failed with no access</h2><ul>
<li>Make sure keys are entered correctly</li>
<li>Allow write access on Public Key<img src="/2020/06/15/Github-Actions-CI-for-Hexo-Github-Page/checkDeployKeyAccess.png" class="" title="Check deploy key access">

</li>
</ul>
<h2 id="Deploy-hexo-failed-with-TypeError-line-matchAll-is-not-a-function"><a href="#Deploy-hexo-failed-with-TypeError-line-matchAll-is-not-a-function" class="headerlink" title="Deploy hexo failed with TypeError: line.matchAll is not a function"></a>Deploy hexo failed with TypeError: line.matchAll is not a function</h2><ul>
<li>Using node.js version above 12.0<img src="/2020/06/15/Github-Actions-CI-for-Hexo-Github-Page/usingNodeVersionAbove12.png" class="" title="Check if node-version later than 12.0">

</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://help.github.com/en/actions">https://help.github.com/en/actions</a><br><a href="https://confluence.atlassian.com/bitbucketserver/creating-ssh-keys-776639788.html">https://confluence.atlassian.com/bitbucketserver/creating-ssh-keys-776639788.html</a><br><a href="https://op30132.github.io/2020/02/05/github-action/">https://op30132.github.io/2020/02/05/github-action/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Hexo - Custom Theme</title>
    <url>/2020/06/24/Hexo-Custom-Theme/</url>
    <content><![CDATA[<h2 id="Chose-your-theme"><a href="#Chose-your-theme" class="headerlink" title="Chose your theme"></a>Chose your theme</h2><p>Go to <a href="https://hexo.io/themes/" title="" target="">Hexo Theme</a> and pick a theme you like.<br><strong>Note: This article, I use <a href="https://github.com/theme-next/hexo-theme-next" title="" target="">NexT</a> theme as example.</strong></p>
<h2 id="Fork-theme-repository"><a href="#Fork-theme-repository" class="headerlink" title="Fork theme repository"></a>Fork theme repository</h2><p>Click into theme repository and fork it. </p>
<img src="/2020/06/24/Hexo-Custom-Theme/nextRepoFork.png" class="" title="Fork NexT theme repository">
<p><strong>⚠ Be aware of Copyrights. No commercial use. ⚠</strong><br>Now you have your own repo which is clone from the theme.</p>
<span id="more"></span>

<h2 id="Git-Submodule"><a href="#Git-Submodule" class="headerlink" title="Git Submodule"></a>Git Submodule</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git submodule add &lt;https://github.com/your/forked/theme/repo&gt; themes/&lt;theme_name&gt;</span><br></pre></td></tr></table></figure>
<p>Clone the repository into <code>theme/&lt;theme_name&gt;</code> as submodule.<br>We can see <code>.gitsubmodule</code> file has been added.</p>
<h2 id="Theme-configuration"><a href="#Theme-configuration" class="headerlink" title="Theme configuration"></a>Theme configuration</h2><p>Open <code>_config.yml</code> in root file and modify theme name.</p>
<img src="/2020/06/24/Hexo-Custom-Theme/configChangeTheme.png" class="" title="Change theme into NexT">
<p>Enter <code>themes/&lt;theme_name&gt;</code> folder, open <code>_config.yml</code>.<br>There is a lot of settings. Change and preview it with <code>hexo server</code>.</p>
<h2 id="Commit-and-push-changes"><a href="#Commit-and-push-changes" class="headerlink" title="Commit and push changes"></a>Commit and push changes</h2><p>After config the theme, we need to commit and push changes on remote.<br>Enter <code>theme/&lt;theme_name&gt;</code> on terminal. Enter command <code>git status</code>.<br>You will see the branch is detached.<br>Update HEAD using <code>git checkout</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>
<p>Since HEAD is on forked-theme-repo/master, commit and push your changes.<br>Also, don’t forget to commit and push blog source.</p>
<h2 id="Checkout-submodules-in-workflow"><a href="#Checkout-submodules-in-workflow" class="headerlink" title="Checkout submodules in workflow"></a>Checkout submodules in workflow</h2><p>Since you have pushed blog source, CI has been triggered.<br>But the blog shows blank layout.<br>Because CI did not checkout submodules.<br>Add <code>Checkout submodules</code> before <code>Deploy hexo</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- name: Checkout submodules</span><br><span class="line">  uses: srt32/git-actions@v0.0.3</span><br><span class="line">  with:</span><br><span class="line">    args: git submodule update --init --recursive</span><br></pre></td></tr></table></figure>
<p>Commit it and wait for CI done its job.</p>
<h1 id="Known-Issues"><a href="#Known-Issues" class="headerlink" title="Known Issues"></a>Known Issues</h1><h2 id="Blank-layout"><a href="#Blank-layout" class="headerlink" title="Blank layout"></a>Blank layout</h2><ul>
<li>Check if submodules checkout successfully<img src="/2020/06/24/Hexo-Custom-Theme/CheckoutSubmodules.png" class="" title="Log of CI Checkout submodules">

</li>
</ul>
<h2 id="Template-Render-Error-while-generating"><a href="#Template-Render-Error-while-generating" class="headerlink" title="Template Render Error while generating"></a>Template Render Error while generating</h2><ul>
<li>Update Hexo to latest version<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm update</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://help.github.com/en/github/getting-started-with-github/fork-a-repo">https://help.github.com/en/github/getting-started-with-github/fork-a-repo</a><br><a href="https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork">https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork</a><br><a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">https://git-scm.com/book/en/v2/Git-Tools-Submodules</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Install-Arrow-OS-on-Redmi-K40</title>
    <url>/2021/12/19/Install-Arrow-OS-on-Redmi-K40/</url>
    <content><![CDATA[<p>This tutorial is mainly for Xiaomi Poco F3 / Xiaomi Mi 11X / Redmi K40.<br>If your phone is not the model above, you will need the ROM that fit the device.<br>But main steps still remain same.</p>
<p><strong>⚠ This may wipe out all personal data in the device, so backup! ⚠</strong></p>
<span id="more"></span>

<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><ul>
<li><p>SDK Platform Tools (or any adb/fastboot tool you prefer):<br><a href="https://developer.android.com/studio/releases/platform-tools">https://developer.android.com/studio/releases/platform-tools</a></p>
</li>
<li><p>FastbootEnhance (or any Payload Dumper you prefer):<br><a href="https://github.com/libxzr/FastbootEnhance/releases">https://github.com/libxzr/FastbootEnhance/releases</a></p>
</li>
<li><p>Unlock Xiaomi Device:</p>
</li>
</ul>
<ol>
<li>Enable Developer Options</li>
<li>Settings&gt; Additional Settings&gt; Developer Options&gt; My Unlock Status</li>
<li>Login Xiaomi account under 4G LTE connection</li>
<li>Wait 168 hours (or bypass waiting time using modified Mi Unlock Tool)</li>
<li>Unlock device from Mi Unlock Tool (you can try unlock to check if the device is under waiting time)</li>
</ol>
<h2 id="First-installation-Clean-flash"><a href="#First-installation-Clean-flash" class="headerlink" title="First installation (Clean flash):"></a>First installation (Clean flash):</h2><p><strong>⚠ Make sure you have unlocked the phone, or may brick it. ⚠</strong></p>
<p>Download ArrowOS ROM zip for Xiaomi Poco F3 / Xiaomi Mi 11X / Redmi K40:<br><a href="https://arrowos.net/download/alioth">https://arrowos.net/download/alioth</a><br>Vanilla Build presents the cleanest OS and GApps Build pre-installed Google apps and services.</p>
<p>Extract image <code>boot</code> and <code>vendor_boot</code> from ROM zip with Payload Dumper.</p>
<img src="/2021/12/19/Install-Arrow-OS-on-Redmi-K40/partitionsUnderPayloadDumper.png" class="" title="Partitions under Payload Dumper">

<p>Reboot in fastboot (press and hold volumn down and power button at same time when power off).</p>
<img src="/2021/12/19/Install-Arrow-OS-on-Redmi-K40/Xiaomi-MIUI-Fastboot-Screen-Mi-Bunny-Mitu.jpg" class="" title="Fastboot Screen Mi Bunny">

<p>Flash arrowos recovery (boot.img and vendor_boot.img):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot flash boot_ab boot.img</span><br><span class="line">fastboot flash vendor_boot_ab vendor_boot.img</span><br></pre></td></tr></table></figure>

<p>Reboot in ArrowOS Recovery:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot reboot recovery</span><br></pre></td></tr></table></figure>

<p>Make format data:<br>Factory reset -&gt; Format data</p>
<p>Flash ROM:<br>Apply update -&gt; Apply from ADB</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb sideload Arrow-alioth.zip</span><br></pre></td></tr></table></figure>

<p>Follow what show on device, should be … Step 1/2 -&gt; 2/2, then flashing ended, can reboot device in system.<br>In cmdline:<br>If the process succeeds the output will stop at 47% and report <code>adb: failed to read command: Success</code>.<br>In some cases it will report <code>adb: failed to read command: No error</code> which is also fine!</p>
<p>If you want to install separate GApps on vanilla buildtype, after flash ROM:<br>Advanced -&gt; Reboot to recovery<br>Flash gapps:<br>Apply update -&gt; Apply from ADB</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb sideload GApps.zip</span><br></pre></td></tr></table></figure>

<h2 id="Install-Update-dirty-flash"><a href="#Install-Update-dirty-flash" class="headerlink" title="Install Update (dirty flash):"></a>Install Update (dirty flash):</h2><p>Go in Settings -&gt; System -&gt; Updater</p>
<p>Download new build -&gt; Install</p>
<p>Device will automatically download, reboot into recovery and install a new build.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://forum.xda-developers.com/t/rom-11-0-0-alioth-aliothin-arrowos-11-0-official-monthly.4279481/#post-85045261">https://forum.xda-developers.com/t/rom-11-0-0-alioth-aliothin-arrowos-11-0-official-monthly.4279481/#post-85045261</a><br><a href="https://blog.jhangy.us/post/unlock-and-flash-xiaomi-redmi-phones/">https://blog.jhangy.us/post/unlock-and-flash-xiaomi-redmi-phones/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Install Hexo and Deploy to GitHub</title>
    <url>/2020/06/03/Install-Hexo/</url>
    <content><![CDATA[<p><strong>Note: All instructions below are based on Windows.</strong></p>
<h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><ul>
<li><a href="https://nodejs.org/en/" title="" target="">Node.js</a></li>
<li><a href="https://git-scm.com/" title="" target="">Git</a></li>
<li><a href="https://notepad-plus-plus.org/" title="" target="">Notepad++</a>( or any editor you prefer)

</li>
</ul>
<span id="more"></span>

<h2 id="Install-Hexo-and-Initailization"><a href="#Install-Hexo-and-Initailization" class="headerlink" title="Install Hexo and Initailization"></a>Install Hexo and Initailization</h2><p>Install with the command below.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>After installing Hexo, let’s initialize it.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init                               //Initialize Hexo in current folder</span><br><span class="line">npm install                             //Install Hexo in current folder</span><br><span class="line">npm install hexo-deployer-git --save    //Install hexo-deployer-git</span><br></pre></td></tr></table></figure>
<p>Or create new folder with initialization.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;                      //Create new folder &lt;folder&gt; and initialize Hexo in it</span><br><span class="line">cd &lt;folder&gt;                             //Change directory into &lt;folder&gt;</span><br><span class="line">npm install                             //Install Hexo in current folder</span><br><span class="line">npm install hexo-deployer-git --save    //Install hexo-deployer-git</span><br></pre></td></tr></table></figure>

<h2 id="Blog-Config"><a href="#Blog-Config" class="headerlink" title="Blog Config"></a>Blog Config</h2><p>Enter the Hexo folder you just set up.<br>And open “_config.yml” by right click -&gt; Edit with Notepad++ (or your own text editor).<br>Modify line 6 ~ line 18. Change URL to your own github page <code>https://&lt;username&gt;.github.to/</code></p>
<img src="/2020/06/03/Install-Hexo/modify_config.png" class="">

<h2 id="Deploy-to-GitHub"><a href="#Deploy-to-GitHub" class="headerlink" title="Deploy to GitHub"></a>Deploy to GitHub</h2><p>At the bottom of “_config.yml”, modify the file as below.<br>Change repo into your own repo link <code>https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</code></p>
<img src="/2020/06/03/Install-Hexo/config_deploy.png" class="">

<p>Enter the command below in terminal.<br>Make sure the path is blog folder.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean          //Clean the cache file (db.json) and generated files (public)</span><br><span class="line">hexo generate       //Generate static files</span><br><span class="line">hexo deploy         //Deploy your website</span><br></pre></td></tr></table></figure>
<p>Now enter <code>https://&lt;username&gt;.github.io/</code> in browser to see how your blog looks like!</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://hexo.io/docs/index.html">https://hexo.io/docs/index.html</a><br><a href="https://hexo.io/docs/commands.html">https://hexo.io/docs/commands.html</a><br><a href="https://hexo.io/docs/one-command-deployment.html">https://hexo.io/docs/one-command-deployment.html</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>RESTful API Brief Introduction</title>
    <url>/2022/09/01/RESTful-API-Brief-Intro/</url>
    <content><![CDATA[<p>Representational State Transfer (REST) architectural style has been first presented in 2000 in dissertation <em>Architectural Styles and the Design of Network-based Software Architectures</em> by Roy Fielding.<br>Which introduced and elaborated the REST architectural style for distributed hypermedia systems.<br>He is also one of the principal authors of HTTP/1.1 specification.</p>
<img src="/2022/09/01/RESTful-API-Brief-Intro/Roy-Fielding.jpg" class="" title="Roy Fielding">

<span id="more"></span>

<h2 id="REST-Guiding-Principles"><a href="#REST-Guiding-Principles" class="headerlink" title="REST Guiding Principles"></a>REST Guiding Principles</h2><p><strong>REST principles indicate how to use HTTP properly.</strong></p>
<p>If an application <strong>completely</strong> compliant with REST principles, can be called</p>
<ul>
<li>RESTful Web Service</li>
<li>RESTful Web API</li>
</ul>
<p>There are 5+1 REST Constraints:</p>
<ul>
<li>Client-Server</li>
<li>Stateless</li>
<li>Cacheable</li>
<li>Uniform Interface</li>
<li>Layered System</li>
<li>Code on Demand (Optional)</li>
</ul>
<h3 id="Client-Server"><a href="#Client-Server" class="headerlink" title="Client-Server"></a>Client-Server</h3><p>Decouple client and server using uniform interface between them.</p>
<p>Separation of concerns is the principle behind the client-server constraints:</p>
<p>API Provider (data storage concerns)</p>
<ul>
<li>Cache</li>
<li>Performance</li>
<li>Scaling</li>
<li>Data Security</li>
<li>Authentication</li>
<li>Authorization</li>
</ul>
<p>API Consumer (user interface concerns)</p>
<ul>
<li>User Experience</li>
<li>User Interface</li>
<li>Multi Platform Support</li>
</ul>
<h3 id="Stateless"><a href="#Stateless" class="headerlink" title="Stateless"></a>Stateless</h3><p>Each request from the client to the server must contain all of the information necessary to understand and complete the request.<br>The server does not store any previous context or state information.<br>The client must keep the session state.</p>
<p>Advantages:</p>
<ul>
<li>Visibility (a monitoring system does not have to look at requests before)</li>
<li>Reliability (easier to recover from partial failures)</li>
<li>Scalibility (server does not have to store state between requests)</li>
</ul>
<p>Trade-offs:</p>
<ul>
<li>Over-communicate</li>
<li>Decrease performance (increasing repetitive data)</li>
</ul>
<h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><p>Response should implicitly or explicitly label itself as cacheable or non-cacheable.<br>If the response is cacheable, the client application gets the right to reuse the response data later for equivalent requests and a specified period.<br>Cache have the potential to partially or completely eliminate some interactions. And can be implemented in any layer of Layered System</p>
<p>Advantages:</p>
<ul>
<li>Efficiency</li>
<li>Scalibility</li>
</ul>
<p>Trade-offs:</p>
<ul>
<li>Decrease reliability (if stale data within the cache differs)</li>
</ul>
<h3 id="Uniform-Interface"><a href="#Uniform-Interface" class="headerlink" title="Uniform Interface"></a>Uniform Interface</h3><p>There are 5 key points for understanding Uniform Interface.</p>
<h4 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h4><p>The key <strong>abstraction of information</strong> in REST is a resource.<br>Any information that we can name can be a resource.<br>Server is treated as many discrete resources.</p>
<p>A resource can be identified by one or multiple URIs (Uniform Resource Identifier).<br>URI is the name of the resource, also an address on Web.</p>
<h4 id="Representation"><a href="#Representation" class="headerlink" title="Representation"></a>Representation</h4><p>Representation of resource describes the <strong>state of resource at a specific time</strong>.<br>Which can be in multiple formats (HTML, XML, JSON, text, picture, video, audio…)</p>
<h4 id="State-Transfer"><a href="#State-Transfer" class="headerlink" title="State Transfer"></a>State Transfer</h4><p>Transfer representation of resource between client and server.<br>Control resource inderectly by transfering and operating representation of resource.</p>
<h4 id="Self-descriptive-Messages"><a href="#Self-descriptive-Messages" class="headerlink" title="Self-descriptive Messages"></a>Self-descriptive Messages</h4><p>Each resource representation should carry enough information to describe how to process the message.<br>It should also provide information of the additional actions that the client can perform on the resource.</p>
<h4 id="Hypermedia-as-the-engine-of-application-state-HATEOAS"><a href="#Hypermedia-as-the-engine-of-application-state-HATEOAS" class="headerlink" title="Hypermedia as the engine of application state (HATEOAS)"></a>Hypermedia as the engine of application state (HATEOAS)</h4><p>The client should have only the initial URI of the application.<br>The client is able to reach the next resources and interactions with the use of hyperlinks.</p>
<h3 id="Layered-System"><a href="#Layered-System" class="headerlink" title="Layered System"></a>Layered System</h3><p>Client-Server Architecture is already a layered system.<br>Layer can be created, deleted, and modified based on requirements.</p>
<p>Each Layer is independent to each other (Decoupling).<br>Each component cannot see beyond the immediate layer they are interacting with (Law of Demeter a.k.a. Principle of Least Knowledge).</p>
<h3 id="Code-on-Demand-Optional"><a href="#Code-on-Demand-Optional" class="headerlink" title="Code on Demand (Optional)"></a>Code on Demand (Optional)</h3><p>Client functionality can be extended by downloading and executing code in the form of applets or scripts.<br>Which simplifies clients by reducing the number of features required to be pre-implemented.</p>
<p>In current Web design is JavaScript, others like JAVA, Flash, ActiveX…</p>
<h2 id="Richardson-Maturity-Model"><a href="#Richardson-Maturity-Model" class="headerlink" title="Richardson Maturity Model"></a>Richardson Maturity Model</h2><p>RMM from Martin Fowler helps checking how RESTful the system is.</p>
<img src="/2022/09/01/RESTful-API-Brief-Intro/REST-Richardson-Maturity-Model.png" class="" title="REST Richardson Maturity Model">

<ul>
<li>Level 0 stands for HTTP</li>
<li>Level 1 breaking a large service endpoint down into multiple resources.</li>
<li>Level 2 introduces a standard set of verbs, removing unnecessary variation.</li>
<li>Level 3 introduces discoverability, providing a way of making a protocol more self-documenting.</li>
</ul>
<h2 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h2><p>REST is an architectural style for distributed hypermedia systems.<br>But the actual situation may be more complicated than in theory.</p>
<p>REST is just like a screwdriver in your toolbox. It works most of the time but not all the time.<br>There are multiple ways to fulfill requirements, sometimes even an anti-pattern way.<br>Requirements are always at first priority, not architecture nor design pattern.</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><blockquote>
<p>Roy Fielding, 2000, <em>Architectural Styles and the Design of Network-based Software Architectures</em><br><a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm">https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm</a><br>RFC2616, RFCs7230-7237<br><a href="https://restfulapi.net/">https://restfulapi.net/</a><br><a href="https://skilltree.my/Events/2022/8/13/Web-API-elementary-net6">https://skilltree.my/Events/2022/8/13/Web-API-elementary-net6</a><br><a href="https://martinfowler.com/articles/richardsonMaturityModel.html">https://martinfowler.com/articles/richardsonMaturityModel.html</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Redis Memory Management</title>
    <url>/2023/12/26/Redis-Memory-Management/</url>
    <content><![CDATA[<h2 id="Key-Expiration"><a href="#Key-Expiration" class="headerlink" title="Key Expiration"></a>Key Expiration</h2><p>Redis allows to set an expiration time for keys using the <code>EXPIRE</code> command or by providing a TTL (Time-to-Live) value when setting the key.<br>This feature is beneficial for managing data expiration and automatic cleanup, saving storage space, and improving performance.<br>Also, there is some data only valid for a period of time, i.e. verify code, login token, etc.</p>
<p>Redis has another dictionary(hashtable) for saving expiration time of keys, which stores unix timestamps in milliseconds (<code>long long</code> data type).</p>
<img src="/2023/12/26/Redis-Memory-Management/redis-expired-dictionary.png" class="" title="Redis Expires Dictionary">

<span id="more"></span>

<p>Key removal mechanism is semi-lazy.<br>Redis keys are expired in two ways, passive, and active way:</p>
<p>A key is passively expired simply when some client tries to access it, and the key is found to be timed out.<br>But if a key is never accessed, it just takes up memory for no reason.</p>
<p>Redis added a second layer of expiration. It reads random keys periodly, and if an expired key is touched, it is deleted by the lazy mechanism as above.<br>Specifically what Redis does 10 times per second (hz):</p>
<ol>
<li>Test 20 random keys from the set of keys with an associated expire.</li>
<li>Delete all the keys found expired.</li>
<li>If more than 25% of keys were expired, start again from step 1.</li>
</ol>
<img src="/2023/12/26/Redis-Memory-Management/redis-ttl-mechanism.drawio.png" class="" title="Active Expiration Loop">

<p>Obviously, active way benefits memory and passive way benefits CPU.<br>Redis uses mixed strategy to optimize memory usage.</p>
<h2 id="Max-Memory-Policy"><a href="#Max-Memory-Policy" class="headerlink" title="Max Memory Policy"></a>Max Memory Policy</h2><p>Though there is expire mechanism, it is still possible to fill up memory with keys.<br>We need <code>Eviction Policies</code> to determine the behavior Redis follows when the <code>maxmemory</code> limit is reached.</p>
<p>The following policies are available:</p>
<ul>
<li><code>noeviction</code>: New values are not saved when memory limit is reached. When a database uses replication, this applies to the primary database</li>
<li><code>allkeys-lru</code> (most common): Removes least recently used (LRU) keys</li>
<li><code>allkeys-lfu</code>: Removes least frequently used (LFU) keys</li>
<li><code>volatile-lru</code>: Removes least recently used keys with the expire field set to true.</li>
<li><code>volatile-lfu</code>: Removes least frequently used keys with the expire field set to true.</li>
<li><code>allkeys-random</code>: Randomly removes keys to make space for the new data added.</li>
<li><code>volatile-random</code>: Randomly removes keys with expire field set to true.</li>
<li><code>volatile-ttl</code>: Removes keys with expire field set to true and the shortest remaining time-to-live (TTL) value.</li>
</ul>
<p>The policies <code>volatile-lru</code>, <code>volatile-lfu</code>, <code>volatile-random</code>, and <code>volatile-ttl</code> behave like <code>noeviction</code> if there are no keys to evict matching the prerequisites (no keys with expiration time).</p>
<p>The best practice is NOT to trigger max memory policy by managing keys with proper TTL, monitoring and analyzing memory usage.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://javaguide.cn/database/redis/redis-questions-01.html">https://javaguide.cn/database/redis/redis-questions-01.html</a><br><a href="https://redis.io/docs/">https://redis.io/docs/</a><br><a href="https://stackoverflow.com/questions/36172745/how-does-redis-expire-keys">https://stackoverflow.com/questions/36172745/how-does-redis-expire-keys</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Replacing Swtich Statement with Hashmap</title>
    <url>/2022/11/25/Replacing-Swtich-Statement-with-Hashmap/</url>
    <content><![CDATA[<img src="/2022/11/25/Replacing-Swtich-Statement-with-Hashmap/Reverse-Polish-Notation.jpg" class="" title="Reverse Polish Notation">

<h2 id="Reverse-Polish-Notation"><a href="#Reverse-Polish-Notation" class="headerlink" title="Reverse Polish Notation"></a>Reverse Polish Notation</h2><p>Reverse Polish Notation (RPN) also called postfix notation.<br>Which which operators follow their operands and does not need any parentheses.<br>For example, <code>3 * (10 + 5)</code> in RPN is <code>3 10 5 + *</code> as above.</p>
<p>How do we write an evaluate function?</p>
<span id="more"></span>

<h2 id="Switch-Statement"><a href="#Switch-Statement" class="headerlink" title="Switch Statement"></a>Switch Statement</h2><p>Assume that all inputs are valid, we do not need to consider edge cases.<br>The easiest way to implement is by using stack.<br>Iterate through input array, push operands into stack, pop operands out and calculate if operator occurs.<br>For four operators <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, obviously we can use <code>if else</code> statement or better, <code>switch</code> statement, to determine the operation.</p>
<p>Let us seen the code using switch statement below:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">evalRPN</span><span class="params">(tokens []<span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	stack := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> _, token := <span class="keyword">range</span> tokens &#123;</span><br><span class="line">		<span class="comment">// if token is an operator, calculate</span></span><br><span class="line">		<span class="comment">// if not, push number into stack</span></span><br><span class="line">		<span class="keyword">if</span> token == <span class="string">&quot;+&quot;</span> || token == <span class="string">&quot;-&quot;</span> || token == <span class="string">&quot;*&quot;</span> || token == <span class="string">&quot;/&quot;</span> &#123;</span><br><span class="line">			<span class="comment">// pop last two elements</span></span><br><span class="line">			a, b := stack[<span class="built_in">len</span>(stack)<span class="number">-2</span>], stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">			<span class="comment">// determine operation and push result</span></span><br><span class="line">			<span class="keyword">switch</span> token &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">				stack = <span class="built_in">append</span>(stack[:<span class="built_in">len</span>(stack)<span class="number">-2</span>], a+b)</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">				stack = <span class="built_in">append</span>(stack[:<span class="built_in">len</span>(stack)<span class="number">-2</span>], a-b)</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">				stack = <span class="built_in">append</span>(stack[:<span class="built_in">len</span>(stack)<span class="number">-2</span>], a*b)</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">				stack = <span class="built_in">append</span>(stack[:<span class="built_in">len</span>(stack)<span class="number">-2</span>], a/b)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			num, _ := strconv.Atoi(token) <span class="comment">// convert string into int</span></span><br><span class="line">			stack = <span class="built_in">append</span>(stack, num)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> stack[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Hashmap"><a href="#Hashmap" class="headerlink" title="Hashmap"></a>Hashmap</h2><p>Seems a bit annoying since it does very similar things in 4 cases.<br>We can take all 4 operators and operations out into a hashmap.<br>By accessing hashmap with operator, we can get the operation that correspond to it.</p>
<p>Here is the code example below:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">evalRPN</span><span class="params">(tokens []<span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	stack := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	operators := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">		<span class="string">&quot;+&quot;</span>: <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> a + b &#125;,</span><br><span class="line">		<span class="string">&quot;-&quot;</span>: <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> a - b &#125;,</span><br><span class="line">		<span class="string">&quot;*&quot;</span>: <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> a * b &#125;,</span><br><span class="line">		<span class="string">&quot;/&quot;</span>: <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> a / b &#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, token := <span class="keyword">range</span> tokens &#123;</span><br><span class="line">		<span class="keyword">if</span> calculate, exist := operators[token]; exist &#123;</span><br><span class="line">			a, b := stack[<span class="built_in">len</span>(stack)<span class="number">-2</span>], stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">			stack = <span class="built_in">append</span>(stack[:<span class="built_in">len</span>(stack)<span class="number">-2</span>], calculate(a, b))</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			num, _ := strconv.Atoi(token)</span><br><span class="line">			stack = <span class="built_in">append</span>(stack, num)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> stack[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>It seems more ordered than before, right?</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Replacing switch statement with hashmap increase tidiness and readability of code.</p>
<p>Note: I have never mentioned there is any performance improvement.</p>
<p>Actually in most cases, replacing <code>switch</code> with hashmap does not increase performance, maybe even a little bit worse.</p>
<p>Since compilers and interpreters are fully optimized for <code>switch</code>. <code>switch</code> will be turned into mapping table, same as hashmap. Sometimes <code>if else</code> if too many cases.</p>
<p>In this particular situation, hashmap may have better performance while consuming more memory.<br>But it is more about readibility.</p>
<p><em>It may decrease readibility for some unskilled programmers. They can only understand fully flattened code with single-dimension.</em></p>
<p>If there are all professional programmer in your team, try it.</p>
<img src="/2022/11/25/Replacing-Swtich-Statement-with-Hashmap/Joma-Tech-Hashmap.jpg" class="" title="Joma Tech">

<blockquote>
<p>Reference<br><a href="https://leetcode.com/problems/evaluate-reverse-polish-notation/">https://leetcode.com/problems/evaluate-reverse-polish-notation/</a><br><a href="https://commons.wikimedia.org/wiki/File:Reverse_Polish_Notation_Stack_Example.jpg">https://commons.wikimedia.org/wiki/File:Reverse_Polish_Notation_Stack_Example.jpg</a><br><a href="https://youtu.be/5bId3N7QZec">https://youtu.be/5bId3N7QZec</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Rooting Deivce with Magisk</title>
    <url>/2021/12/20/Rooting-Deivce-with-Magisk/</url>
    <content><![CDATA[<img src="/2021/12/20/Rooting-Deivce-with-Magisk/Magisk_Logo.png" class="" title="Magisk">

<p>Magisk is a systemless rooting system.<br>Which was developed by Topjohnwu and launched in the year 2016, and since then has been widening its horizons with each passing year.<br>Magisk Root is a boon especially when it comes to running the financial applications.</p>
<span id="more"></span>

<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><ul>
<li>SDK Platform Tools (or any adb/fastboot tool you prefer):<br><a href="https://developer.android.com/studio/releases/platform-tools">https://developer.android.com/studio/releases/platform-tools</a></li>
</ul>
<h2 id="Install-Magisk-App"><a href="#Install-Magisk-App" class="headerlink" title="Install Magisk App"></a>Install Magisk App</h2><p>Download the latest Magisk app from <a href="https://github.com/topjohnwu/Magisk/releases" title="Topjohnwu&#39;s Github releases" target=""></a> and install it.<br>Open Magisk app and check if value of <code>Ramdisk</code> is <code>Yes</code>. If not, you will need advanced tutorial from my reference links below.</p>
<h2 id="Patch-Boot-Image"><a href="#Patch-Boot-Image" class="headerlink" title="Patch Boot Image"></a>Patch Boot Image</h2><p>You need a copy of <code>boot.img</code> which is exracted from official firmware packages or custom ROM that your device is currently using.<br>If your device utilizes the A/B partition scheme, you will need a Payload Dumper to extract <code>payload.bin</code> in <code>ROM.zip</code> (see my previous article).</p>
<img src="/2021/12/20/Rooting-Deivce-with-Magisk/partitionsUnderPayloadDumper.png" class="" title="Partitions under Payload Dumper">

<p>Once you reach the boot image, copy it to your device.<br>In Magisk App, press the <code>Install</code> button and choose method <code>Select and Patch a File</code>, and select the stock boot image that you just copied.</p>
<h2 id="Flash-Patched-Boot-Image"><a href="#Flash-Patched-Boot-Image" class="headerlink" title="Flash Patched Boot Image"></a>Flash Patched Boot Image</h2><p>Magisk App will patched the image to <code>Download</code> file in your device, the path shall be <code>&#123;Internal Storage&#125;/Download/magisk_patched_&#123;random_strings&#125;.img</code>. Copy it to your PC.</p>
<p>Flash the patched boot image to your device:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot flash boot magisk_patched_&#123;random_strings&#125;.img</span><br></pre></td></tr></table></figure>

<p>Reboot the device:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure>

<h2 id="Enjoy-Magisk"><a href="#Enjoy-Magisk" class="headerlink" title="Enjoy Magisk"></a>Enjoy Magisk</h2><p>Open App and check if Magisk in installed properly:</p>
<img src="/2021/12/20/Rooting-Deivce-with-Magisk/Magisk-Installed.png" class="" title="Magisk after installed">


<h1 id="TroubleShooting"><a href="#TroubleShooting" class="headerlink" title="TroubleShooting"></a>TroubleShooting</h1><h2 id="Cannot-Boot-after-Flashing-Boot-Image"><a href="#Cannot-Boot-after-Flashing-Boot-Image" class="headerlink" title="Cannot Boot after Flashing Boot Image"></a>Cannot Boot after Flashing Boot Image</h2><p>If you stuck at booting logo screen, you may have patched wrong boot image.<br>Download exact same version of ROM of your device current system. Re-patch <code>boot.img</code> and re-flash the new patched boot image to device shall fix it.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://topjohnwu.github.io/Magisk/install.html">https://topjohnwu.github.io/Magisk/install.html</a><br><a href="https://magiskmanager.com/">https://magiskmanager.com/</a><br><a href="https://www.xda-developers.com/how-to-install-magisk/">https://www.xda-developers.com/how-to-install-magisk/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>SEO(Search Engine Optimization) on Hexo NexT</title>
    <url>/2020/07/14/SEO-hexo-next/</url>
    <content><![CDATA[<h2 id="Google-Search-Console"><a href="#Google-Search-Console" class="headerlink" title="Google Search Console"></a>Google Search Console</h2><p>Go to <a href="https://search.google.com/search-console/welcome" title="" target="">Google Search Console</a> and add property.</p>
<img src="/2020/07/14/SEO-hexo-next/search_console_new_property.png" class="" title="Enter blog URL under URL prefix">

<span id="more"></span>

<p>Then verify ownership by HTML tag.</p>
<img src="/2020/07/14/SEO-hexo-next/verify_ownership.png" class="" title="Click HTML tag to see extended content">

<p>Copy the meta tag which contains verify code.</p>
<img src="/2020/07/14/SEO-hexo-next/verify_ownership_HTML_tag.png" class="" title="Click copy">

<p>Paste the copied meta tag on the top of <code>head.swig</code>.<br>Which is under <code>&lt;username&gt;.github.io\themes\next\layout\_partials\head\</code><br>After generating and deployment, you will verify it successfully.</p>
<h2 id="Submit-Sitemap"><a href="#Submit-Sitemap" class="headerlink" title="Submit Sitemap"></a>Submit Sitemap</h2><p>Install Hexo plugin to generate sitemap.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>
<p>Then open <code>_config.yml</code> under <code>root\</code>, add the code beneath at the end:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br></pre></td></tr></table></figure>
<p>After generating and deployment, check if it generated <code>sitemap.xml</code> successfully.</p>
<p>Then submit the sitemap to Google Search Console.</p>
<img src="/2020/07/14/SEO-hexo-next/submit_sitemap.png" class="" title="Submit sitemap.xml to Google Search Console">
<p>Check the status of siremap. You should see “Success”.</p>
<h2 id="Google-Analytics"><a href="#Google-Analytics" class="headerlink" title="Google Analytics"></a>Google Analytics</h2><p>Register on <a href="https://analytics.google.com/" title="" target="">Google Analytics</a>.</p>
<img src="/2020/07/14/SEO-hexo-next/welcome_google_analytics.png" class="" title="Welcome to Google Analytics">

<p>Enter account name (you can change it later).</p>
<img src="/2020/07/14/SEO-hexo-next/google_analytics_account_setup.png" class="" title="Account setup">

<p>Choose “Web”.</p>
<img src="/2020/07/14/SEO-hexo-next/google_analytics_measure_website.png" class="" title="What do you want to measure?">

<p>Enter “Website Web” and “Website URL”. <strong>Select “https://“.</strong></p>
<img src="/2020/07/14/SEO-hexo-next/google_analytics_property_setup.png" class="" title="Property setup">

<p>Then you will get a unique tracking ID.<br>Put the ID in <code>username.github.io\themes\next\_config.yml</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Google Analytics</span><br><span class="line">google_analytics:</span><br><span class="line">  tracking_id: UA-XXXXXXXXX-X</span><br><span class="line">  localhost_ignored: true</span><br></pre></td></tr></table></figure>

<p>See if Google Analytics get any dataflow.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://support.google.com/webmasters/answer/9429907">https://support.google.com/webmasters/answer/9429907</a><br><a href="https://github.com/hexojs/hexo-generator-sitemap">https://github.com/hexojs/hexo-generator-sitemap</a><br><a href="https://support.google.com/analytics/answer/1008015?hl=en">https://support.google.com/analytics/answer/1008015?hl=en</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Safety and Idempotence in API Design</title>
    <url>/2023/02/16/Safety-and-Idempotence-in-API-Design/</url>
    <content><![CDATA[<img src="/2023/02/16/Safety-and-Idempotence-in-API-Design/http-methods.jpg" class="" title="HTTP methods">

<p>There are various HTTP methods. Every of them has its own semantics.<br>Which means each method has been defined what it should do.</p>
<p>Designing APIs that following semantics is important since semantics of methods has been defined in HTTP/1.1 specification.<br>Almost all browsers, APIs, apps, tools, and other developments are based on this consensus.<br>So not following it may cause issues in most scenarios.</p>
<span id="more"></span>

<h2 id="Safe-Methods"><a href="#Safe-Methods" class="headerlink" title="Safe Methods"></a>Safe Methods</h2><p>Definition of safe methods in RFC7231:</p>
<blockquote>
<p>4.2.1.  Safe Methods</p>
<p>Request methods are considered “safe” if their defined semantics are essentially read-only; i.e., the client does not request, and does not expect, any state change on the origin server as a result of applying a safe method to a target resource.<br>Likewise, reasonable use of a safe method is not expected to cause any harm, loss of property, or unusual burden on the origin server.</p>
</blockquote>
<p>Did you saw the keyword? <code>Read-only</code>.</p>
<blockquote>
<p>A <code>safe method</code> shall not alter any state of the server. In other word, it performs <code>read-only</code> operation.</p>
</blockquote>
<p>But this does not mean entirely read-only.<br>For example, logging will not break the definition of <code>safe method</code> though it appends data into log file.<br>We only concern about resource data.</p>
<blockquote>
<p>In HTTP/1.1 specification, the <code>GET</code>, <code>HEAD</code>, <code>OPTIONS</code>, and <code>TRACE</code> methods are defined to be safe.</p>
</blockquote>
<p>The mostly used <code>safe method</code> must be <code>GET</code>.<br>For instance, you want to obtain a book detail by <code>GET</code> request <code>GET library/books/123456</code>.<br>This request will only retrieve book information and will not apply any changes to the server.<br>Unlike <code>DELETE library/books/123456</code> will remove the book which apparently change the state of server.</p>
<p>But why we need to determine if a method is <code>safe</code> or not?</p>
<p><code>Safe methods</code> allow automated retrieval processes (spiders or crawlers) and cache performance optimization (pre-fetching) to work without any fear of causing harm.<br>Furthermore, allow appropiate constraints on the use of <code>unsafe methods</code>.</p>
<p>As the book example above, browser can cache the response retrieving from <code>GET library/books/123456</code>.<br>If you make the identical request again, browser will return the same response from cache.</p>
<h2 id="Idempotent-Methods"><a href="#Idempotent-Methods" class="headerlink" title="Idempotent Methods"></a>Idempotent Methods</h2><p>Definition of idempotent methods in RFC7231:</p>
<blockquote>
<p>4.2.2.  Idempotent Methods</p>
<p>A request method is considered “idempotent” if the intended effect on the server of multiple identical requests with that method is the same as the effect for a single such request.<br>Of the request methods defined by this specification, PUT, DELETE, and safe request methods are idempotent.</p>
</blockquote>
<p>The purpose of idempotence is to make API to be fault-tolerant, which means it is retryable.</p>
<p>Still we have the example <code>DELETE library/books/123456</code>.<br>What if the connection failed? How do we make sure that the book has been deleted?</p>
<p>Just re-establish a new connection and send the identical request again.<br>Since <code>DELETE</code> is an idempotent method, multiple identical requests make the same effect to server as a single request.</p>
<p>Though you may get <code>404</code> on second attempt or after if the book has already been deleted but it does not matter.</p>
<blockquote>
<p>Repeating the request will have the same intended effect, even if the original request succeeded, though the response might differ.</p>
</blockquote>
<p>Also, <code>safe methods</code> like <code>GET</code>, is idempotent as well.<br><code>Safe methods</code> do not alter server state at all, obviously are repeatable.</p>
<p><code>POST</code> is not idempotent since multiple resources may be created if the request is sent repeatly.</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><blockquote>
<p><a href="https://www.rfc-editor.org/rfc/rfc7231">https://www.rfc-editor.org/rfc/rfc7231</a><br><a href="https://restfulapi.net/idempotent-rest-apis/">https://restfulapi.net/idempotent-rest-apis/</a><br><a href="https://lance.coderbridge.io/2021/06/06/what-is-safe-method-and-indempotent-methods/">https://lance.coderbridge.io/2021/06/06/what-is-safe-method-and-indempotent-methods/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Share New Blog Article on LinkedIn via Zapier</title>
    <url>/2021/12/25/Share-New-Blog-Article-on-LinkedIn-via-Zapier/</url>
    <content><![CDATA[<h2 id="Add-RSS-in-your-site"><a href="#Add-RSS-in-your-site" class="headerlink" title="Add RSS in your site"></a>Add RSS in your site</h2><p>Install hexo generator feed:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<p>Put the plugin in <code>_config.yml</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">icon.png</span></span><br><span class="line">  <span class="attr">autodiscovery:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">template:</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>Verify if <code>atom.xml</code> is generated to your repositary:</p>
<img src="/2021/12/25/Share-New-Blog-Article-on-LinkedIn-via-Zapier/Check-atom.xml.png" class="" title="Check atom.xml">

<h2 id="Create-and-configure-workflow-on-Zapier"><a href="#Create-and-configure-workflow-on-Zapier" class="headerlink" title="Create and configure workflow on Zapier"></a>Create and configure workflow on Zapier</h2><p>First, register on Zapier.</p>
<p>Select <code>RSS by Zapier</code> and <code>LinkedIn</code>.<br>Choose the recommended workflow: blog posts on linkedin.</p>
<img src="/2021/12/25/Share-New-Blog-Article-on-LinkedIn-via-Zapier/Create-workflow.png" class="" title="Create Workflow">

<p>Add RSS URL of your blog to <code>Feed URL</code>.</p>
<img src="/2021/12/25/Share-New-Blog-Article-on-LinkedIn-via-Zapier/Add-RSS-URL.png" class="" title="Add RSS URL">

<p>Zapier will crawl the three latest articles in RSS.<br>If it looks all right, continue.</p>


<p>Select <code>Create Share Update</code> and connect to your LinkedIn account.</p>
<img src="/2021/12/25/Share-New-Blog-Article-on-LinkedIn-via-Zapier/Create-Share-Update-in-LinkedIn.png" class="" title="Create Share Update in LinkedIn">
<img src="/2021/12/25/Share-New-Blog-Article-on-LinkedIn-via-Zapier/Grant-Access-to-Zapier.png" class="" title="Grant Access to Zapier">
<img src="/2021/12/25/Share-New-Blog-Article-on-LinkedIn-via-Zapier/LinkedIn-Account-Connected.png" class="" title="LinkedIn Account Connected">

<p>Configure post format.</p>
<img src="/2021/12/25/Share-New-Blog-Article-on-LinkedIn-via-Zapier/Set-up-Actions.png" class="" title="Set up Actions">

<p>Test the Zap and check it on your LinkedIn.</p>
<img src="/2021/12/25/Share-New-Blog-Article-on-LinkedIn-via-Zapier/Send-Test-Post-via-Zap.png" class="" title="Send Test Post via Zap">
<img src="/2021/12/25/Share-New-Blog-Article-on-LinkedIn-via-Zapier/Test-Post-on-LinkedIn.png" class="" title="Test Post on LinkedIn">

<p>Rename the Zap and turn it on.</p>
<img src="/2021/12/25/Share-New-Blog-Article-on-LinkedIn-via-Zapier/Turn-on-Zap.png" class="" title="Turn on Zap">

<p>From now on, Zapier will share every new article from your blog automatically.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://github.com/hexojs/hexo-generator-feed">https://github.com/hexojs/hexo-generator-feed</a><br><a href="https://zapier.com/apps/linkedin/integrations/rss/152/grow-your-audience-by-sharing-your-new-blog-posts-on-linkedin">https://zapier.com/apps/linkedin/integrations/rss/152/grow-your-audience-by-sharing-your-new-blog-posts-on-linkedin</a><br><a href="https://www.tricycle-europe.com/how-to-automate-sharing-to-linkedin/">https://www.tricycle-europe.com/how-to-automate-sharing-to-linkedin/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>TFVC vs Git - Which version control system should I choose?</title>
    <url>/2021/09/17/TFS-vs-Git/</url>
    <content><![CDATA[<h2 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h2><p>Initially, TFS supported only TFVC, and support for Git as a source code repository was added later in TFS 2013. Also, Microsoft suggest user to use Git: “Git is the default version control provider for new projects. You should use Git for version control in your projects unless you have a specific need for centralized version control features in TFVC.”</p>
<span id="more"></span>

<h2 id="What-is-TFVC"><a href="#What-is-TFVC" class="headerlink" title="What is TFVC?"></a>What is TFVC?</h2><p>Team Foundation Version Control (TFVC) is a centralized version control system. Typically, team members have only one version of each file on their dev machines. Historical data is maintained only on the server. Branches are path-based and created on the server.</p>
<p>TFVC has two workflow models:</p>
<ul>
<li><p>Server workspaces - Before making changes, team members publicly check out files. Most operations require developers to be connected to the server. This system facilitates locking workflows. Other systems that work this way include Visual Source Safe, Perforce, and CVS. With server workspaces, you can scale up to very large codebases with millions of files per branch and large binary files.</p>
</li>
<li><p>Local workspaces - Each team member takes a copy of the latest version of the codebase with them and works offline as needed. Developers check in their changes and resolve conflicts as necessary. Another system that works this way is Subversion.</p>
</li>
</ul>
<h2 id="What-is-Git"><a href="#What-is-Git" class="headerlink" title="What is Git?"></a>What is Git?</h2><p>Git is a distributed version control system. Each developer has a copy of the source repository on their dev machine. Developers can commit each set of changes on their dev machine and perform version control operations such as history and compare without a network connection. Branches are lightweight. When you need to switch contexts, you can create a private local branch. You can quickly switch from one branch to another to pivot among different variations of your codebase. Later, you can merge, publish, or dispose of the branch.</p>
<h2 id="Benefits-of-Using-Git"><a href="#Benefits-of-Using-Git" class="headerlink" title="Benefits of Using Git"></a>Benefits of Using Git</h2><ul>
<li><p>Creating new branches in Git is very cheap.<br>TFVC creates branch by coping whole project while Git almost does nothing cause Git using bit difference to record changes. So what Git does is just take a note that this node has two path below.</p>
</li>
<li><p>Better workflow management<br>Since it is cheap to creat branches in Git. We can use branches to seperate different environment. Such as dev, test, prod, feature, hotfix. And connect these branches by pull requests. For more deeper explanation, search for “Git Flow”.</p>
</li>
<li><p>Developers have a full version history on local. No need to connect server to compare changes and view history. Despite the advantage of working offline, there is no server response time while manipulating version control system.</p>
</li>
<li><p>You can trim the messy branch on local and then sync to server with clean history. And if any issue accurs, just downgrade version. It does not affect anyone since it is all on local. Whithout the concern, it is more freely to make changes on commits history.</p>
</li>
<li><p>Git skills is more valueable than TFVC since Git is a standard version control system in most industry. If you have chance to switch team or company, Git skills can get you more points.</p>
</li>
</ul>
<h2 id="Benefits-of-TFVC"><a href="#Benefits-of-TFVC" class="headerlink" title="Benefits of TFVC"></a>Benefits of TFVC</h2><ul>
<li><p>No learning cost for developers who have been using TFVC for years. But there is risks of drifting away from morden techniques since more and more projects using Git as version control system.</p>
</li>
<li><p>Centralized system has more clear and simple control logic, GUIs are easy to use. Compare to Git, Git is a distributed system which has more complex commands that makes GUIs are not able to cover all situations. Command line is needed, which is not as friendly as TFVC.</p>
</li>
<li><p>Fewer merge conflicts happen in TFVC. Git is a distributed system. Developing independently and branching makes pull requests and merge conflicts. Which increases code quality but also more management.</p>
</li>
</ul>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Since Git is more popular and powerful than TFVC, I suggest new projects to use Git instead of TFVC.<br>However, there is a lot of projects created before TFS supporting Git. Should they move from TFVC to Git? It depends on needs to the benefits of Git, otherwise it will just increase learning cost and pain for the team, and even worse, mess up the workflow and confuse team members.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/comparison-git-tfvc?view=azure-devops">https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/comparison-git-tfvc?view=azure-devops</a><br><a href="https://simpleprogrammer.com/git-vs-tfvc/">https://simpleprogrammer.com/git-vs-tfvc/</a><br><a href="https://blog.darkthread.net/blog/tfvc-vs-git/">https://blog.darkthread.net/blog/tfvc-vs-git/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Fundamentals of Garbage Collection in .NET</title>
    <url>/2024/01/08/fundamentals-of-garbage-collection-in-dotnet/</url>
    <content><![CDATA[<p>The common language runtime (CLR) provides an automatic memory manager, which is the garbage collector (GC).<br>Unlike languages like C and C++, developers need to manually handle memory allocation, the GC manages the allocation and deallocation of memory for objects in a .NET application to simplify development, reduce memory leaks, and improve overall code safety.</p>
<img src="/2024/01/08/fundamentals-of-garbage-collection-in-dotnet/dotnet_logo.png" class="" title=".NET logo">


<span id="more"></span>


<h2 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h2><p>The garbage collector provides the following benefits:</p>
<ul>
<li><p>Frees developers from having to manually release memory.</p>
</li>
<li><p>Allocates objects on the managed heap efficiently.</p>
</li>
<li><p>Reclaims objects not used and clears their memory for future allocation.</p>
</li>
<li><p>Provides memory safety.</p>
</li>
</ul>
<h2 id="Fundamentals-of-memory"><a href="#Fundamentals-of-memory" class="headerlink" title="Fundamentals of memory"></a>Fundamentals of memory</h2><p>Common language runtime (CLR) memory concepts:</p>
<ul>
<li><p>Each process has its own, separate virtual address space. All processes on the same computer share the same physical memory and the page file, if there is one.</p>
</li>
<li><p>By default, on 32-bit computers, each process has a 2-GB user-mode virtual address space.</p>
</li>
<li><p>Application developers work only with virtual address space and never manipulate physical memory directly.The garbage collector allocates and frees virtual memory on the managed heap.</p>
</li>
<li><p>Virtual memory can be in three states:</p>
<ul>
<li>Free: The block of memory has no references to it and is available for allocation.</li>
<li>Reserved: The block of memory is available for use and cannot be used for any other allocation request. However, cannot store data to this memory block until committed.</li>
<li>Committed: The block of memory is assigned to physical storage.</li>
</ul>
</li>
</ul>
<ul>
<li><p>Virtual address space can get fragmented.</p>
</li>
<li><p>Run out of memory if there is not enough virtual address space to reserve or physical space to commit.</p>
</li>
</ul>
<h2 id="When-does-Garbage-Collection-occur"><a href="#When-does-Garbage-Collection-occur" class="headerlink" title="When does Garbage Collection occur"></a>When does Garbage Collection occur</h2><ul>
<li><p>Low physical memory.</p>
</li>
<li><p>The memory used surpasses an acceptable threshold.</p>
</li>
<li><p>The <code>GC.Collect()</code> method is called.</p>
</li>
</ul>
<h2 id="The-managed-heap"><a href="#The-managed-heap" class="headerlink" title="The managed heap"></a>The managed heap</h2><p>After the CLR initializes the garbage collector, it allocates a segment of memory to store and manage objects. This memory is called the managed heap.</p>
<p>The fewer objects allocated on the heap, the less work the garbage collector has to do.</p>
<p>When a garbage collection is triggered, the garbage collector reclaims the memory that is occupied by dead objects. The reclaiming process compacts live objects so that they are moved together, and the dead space is removed, thereby making the heap smaller.</p>
<p>The heap can be considered as the accumulation of two heaps:</p>
<ul>
<li>Small object heap</li>
<li>Large object heap (LOH): Contains objects that are 85,000 bytes and larger, which are usually arrays. It is rare for an instance object to be extra large.</li>
</ul>
<h2 id="Object-Generations"><a href="#Object-Generations" class="headerlink" title="Object Generations"></a>Object Generations</h2><p>The GC algorithm is based on several considerations:</p>
<ul>
<li>Compacting a portion of the managed heap is faster than the entire managed heap.</li>
<li>Newer objects have shorter lifetimes, and older objects have longer lifetimes.</li>
<li>Newer objects tend to be related to each other and accessed by the application around the same time.</li>
</ul>
<p>To optimize the performance of the garbage collector, the managed heap is divided into three generations, 0, 1, and 2, so it can handle long-lived and short-lived objects separately.</p>
<ul>
<li><p>Generation 0: The youngest generation and contains short-lived objects such as temporary variables. Garbage collection occurs most frequently in this generation.<br>Newly allocated objects form implicitly Generation 0 collections. However, large objects go on the large object heap.</p>
</li>
<li><p>Generation 1: This generation contains short-lived objects and serves as a buffer between short-lived objects and long-lived objects. After the garbage collector performs a collection of generation 0, it compacts the memory for the reachable objects and promotes them to Generation 1. Garbage collection in Generation 1 and Generation 2 only occurs if more memory needs be reclaimed after Generation 0 is garbage collected.</p>
</li>
<li><p>Generation 2: Contains long-lived objects such as static data. The large object heap, which is sometimes referred to as generation 3, is collected as part of Generation 2.</p>
</li>
</ul>
<p>Objects that are not reclaimed in a garbage collection (a.k.a. survivors) and are promoted to the next Generation.</p>
<p>When the garbage collector detects that the survival rate is high in a generation, it increases the threshold of allocations for that generation. The next collection gets a substantial size of reclaimed memory.</p>
<p>The CLR continually balances two priorities:</p>
<ol>
<li>Not letting a working set get too large by delaying garbage collection.</li>
<li>Not letting the garbage collection run too frequently.</li>
</ol>
<h2 id="What-happens-during-a-garbage-collection"><a href="#What-happens-during-a-garbage-collection" class="headerlink" title="What happens during a garbage collection"></a>What happens during a garbage collection</h2><ol>
<li>Marking phase: Finds and creates a list of all live objects.</li>
</ol>
<img src="/2024/01/08/fundamentals-of-garbage-collection-in-dotnet/marking.png" class="" title="Marking">

<ol start="2">
<li><p>Relocating phase: Updates the references to the objects that will be compacted.</p>
</li>
<li><p>Compacting phase: Reclaims the space occupied by the dead objects and compacts the surviving objects by moving objects towards the older end of the segment.</p>
</li>
</ol>
<img src="/2024/01/08/fundamentals-of-garbage-collection-in-dotnet/normal-deletion.png" class="" title="Deletion without compacting">

<img src="/2024/01/08/fundamentals-of-garbage-collection-in-dotnet/deletion-with-compacting.png" class="" title="After compacting">

<p>The large object heap (LOH) is not compacted because copying large objects imposes a performance penalty. LOH is automatically compacted when a memory limit on a container or other runtime configuration options is reached.</p>
<p>Before a garbage collection starts, all managed threads are suspended except for the thread that triggered the garbage collection.</p>
<img src="/2024/01/08/fundamentals-of-garbage-collection-in-dotnet/gc-triggered.png" class="" title="Garbage Collection Triggered">


<h2 id="Unmanaged-resources"><a href="#Unmanaged-resources" class="headerlink" title="Unmanaged resources"></a>Unmanaged resources</h2><p>For most of the objects, garbage collection can perform the necessary memory management tasks automatically. However, unmanaged resources require explicit cleanup.<br>The most common type of unmanaged resource is an object that wraps an operating system resource, such as a file handle, window handle, network connection, or database connection.<br>Although the garbage collector can track the lifetime of a managed object that encapsulates an unmanaged resource, it does not have specific knowledge about how to clean up the resource and how badly it hurts the performance.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Although the garbage collector implicitly clean up memory to simplify development, it is still important to learn how it works and what is the boundary of it.<br>To prevent potential performance issues related to memory management, such as memory overhead, fragmentation, and resource lock.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals">https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals</a><br><a href="https://www.site24x7.com/learn/garbage-collection-in-net-framework.html">https://www.site24x7.com/learn/garbage-collection-in-net-framework.html</a><br><a href="https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html">https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html</a></p>
</blockquote>
]]></content>
  </entry>
</search>
